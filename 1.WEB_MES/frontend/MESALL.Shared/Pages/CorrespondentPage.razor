
@page "/correspondent"
@using System.Text.Json
@using System.Net.Http.Json
@using MESALL.Shared.Enums
@using MESALL.Shared.Pages.Components
@using MESALL.Shared.Models
@using MESALL.Shared.Interfaces
@inject ICorrespondentService CorrespondentService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@inherits ComponentBase
@implements IDisposable
@attribute [CascadingTypeParameter("TValue")]

<div class="page-container">
    <header class="page-header">
        <div class="header-title">
            <h1>거래처 관리</h1>
            <span class="correspondent-count">총 @(_filteredCorrespondents?.Count ?? 0)개의 거래처</span>
        </div>
    </header>

    <HRow JustifyContent="space-between" AlignItems="center">
        <div class="filters-section">
            <div class="filter-tag @(_activeFilter == null ? "active" : "")" @onclick='() => ApplyFilter(null)'>
                전체
            </div>
            <div class="filter-tag @(_activeFilter == CorrespondentType.Sales ? "active" : "")" @onclick='() => ApplyFilter(CorrespondentType.Sales)'>
                매출 거래처
            </div>
            <div class="filter-tag @(_activeFilter == CorrespondentType.Purchase ? "active" : "")" @onclick='() => ApplyFilter(CorrespondentType.Purchase)'>
                매입 거래처
            </div>
            <div class="filter-tag @(_activeFilter == CorrespondentType.Both ? "active" : "")" @onclick='() => ApplyFilter(CorrespondentType.Both)'>
                매출/매입 공통
            </div>
        </div>

        <HRow AutoWidth="true" Gap="1rem" AlignItems="center">
            <HTextInput
                Width="300px"
                PlaceHolder="거래처명, 대표자, 사업자번호 검색"
                Value="@_searchTerm"
                ValueChanged="@((value) => { _searchTerm = value; ApplyFiltersAndSort(); })"
                MarginBottom="0"
            >
                @if (!string.IsNullOrEmpty(_searchTerm))
                {
                    <button class="clear-search" @onclick="ClearSearch">×</button>
                }
            </HTextInput>

            @* <div class="view-toggle"> *@
            @*     <button class="view-toggle-btn @(_viewMode == ViewMode.List ? "active" : "")" *@
            @*             @onclick="() => _viewMode = ViewMode.List"> *@
            @*         <i class="fas fa-list"></i> *@
            @*     </button> *@
            @*     <button class="view-toggle-btn @(_viewMode == ViewMode.Card ? "active" : "")" *@
            @*             @onclick="() => _viewMode = ViewMode.Card"> *@
            @*         <i class="fas fa-th-large"></i> *@
            @*     </button> *@
            @* </div> *@

            <HButton OnClick="OpenAddCorrespondentDialog">
                <i class="fas fa-plus"></i> 거래처 등록
            </HButton>
        </HRow>
    </HRow>

    @if (_isLoading)
    {
        <HLoading LoadingText="거래처 정보를 불러오는 중입니다..." />
    }
    else if (_filteredCorrespondents == null || _filteredCorrespondents.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="fas fa-building"></i>
            </div>
            <h3>거래처가 없습니다</h3>
            @if (!string.IsNullOrEmpty(_searchTerm) || _activeFilter != null)
            {
                <p>검색어 또는 필터에 해당하는 거래처가 없습니다.</p>
                <button class="secondary-btn" @onclick="ClearFilters">
                    필터 초기화
                </button>
            }
            else
            {
                <p>첫 번째 거래처를 등록해 보세요!</p>
                <button class="primary-btn" @onclick="OpenAddCorrespondentDialog">
                    <i class="fas fa-plus"></i> 거래처 등록
                </button>
            }
        </div>
    }
    else
    {
        @if (_viewMode == ViewMode.List)
        {
            <div class="list-view">
                <table>
                    <thead>
                    <tr>
                        <th class="image-cell">이미지</th>
                        <th @onclick='() => SortItems("name")' class="sortable-header">
                            거래처명 @GetSortIcon("name")
                        </th>
                        <th @onclick='() => SortItems("type")' class="sortable-header">
                            구분 @GetSortIcon("type")
                        </th>
                        <th @onclick='() => SortItems("ceo")' class="sortable-header">
                            대표자 @GetSortIcon("ceo")
                        </th>
                        <th @onclick='() => SortItems("businessNumber")' class="sortable-header">
                            사업자번호 @GetSortIcon("businessNumber")
                        </th>
                        <th>연락처</th>
                        <th @onclick='() => SortItems("date")' class="sortable-header">
                            등록일 @GetSortIcon("date")
                        </th>
                        <th>작업</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var correspondent in _filteredCorrespondents)
                    {
                        <tr>
                            <td class="image-cell">
                                @if (!string.IsNullOrEmpty(correspondent.CorrespondentPhotoUri))
                                {
                                    <img src="@correspondent.CorrespondentPhotoUri" alt="@correspondent.Name" />
                                }
                                else
                                {
                                    <div class="no-image">
                                        <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <rect width="48" height="48" rx="4" fill="#F5F7FA" />
                                            <path d="M32 24C32 28.4183 28.4183 32 24 32C19.5817 32 16 28.4183 16 24C16 19.5817 19.5817 16 24 16C28.4183 16 32 19.5817 32 24Z" stroke="#BDBDBD" stroke-width="2" />
                                            <path d="M24 20V28" stroke="#BDBDBD" stroke-width="2" stroke-linecap="round" />
                                            <path d="M20 24H28" stroke="#BDBDBD" stroke-width="2" stroke-linecap="round" />
                                        </svg>
                                    </div>
                                }
                            </td>
                            <td>@correspondent.Name</td>
                            <td>
                                <span class="correspondent-type @GetCorrespondentTypeClass(correspondent.Type)">
                                    @correspondent.Type
                                </span>
                            </td>
                            <td>@correspondent.Ceo</td>
                            <td>@FormatBusinessNumber(correspondent.BusinessNumber)</td>
                            <td>@FormatPhoneNumber(correspondent.PhoneNumber)</td>
                            <td>@correspondent.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td class="actions-cell">
                                @* <button class="icon-btn edit-btn" title="수정" @onclick="() => OpenEditCorrespondentDialog(correspondent)"> *@
                                @*     <i class="fas fa-edit"></i> *@
                                @* </button> *@
                                <button class="icon-btn delete-btn" title="삭제" @onclick="() => ConfirmDeleteCorrespondent(correspondent)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="card-view">
                @foreach (var correspondent in _filteredCorrespondents)
                {
                    <div class="correspondent-card">
                        <div class="correspondent-card-header">
                            <span class="correspondent-type-badge @GetCorrespondentTypeClass(correspondent.Type)">
                                @GetCorrespondentTypeDisplayName(correspondent.Type)
                            </span>
                            <div class="card-actions">
                                @* <button class="icon-btn edit-btn" title="수정" @onclick="() => OpenEditCorrespondentDialog(correspondent)"> *@
                                @*     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"> *@
                                @*         <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/> *@
                                @*         <path d="m15 5 4 4"/> *@
                                @*     </svg> *@
                                @* </button> *@
                                <button class="icon-btn delete-btn" title="삭제" @onclick="() => ConfirmDeleteCorrespondent(correspondent)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M3 6h18"/>
                                        <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                                        <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
                                        <line x1="10" y1="11" x2="10" y2="17"/>
                                        <line x1="14" y1="11" x2="14" y2="17"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="correspondent-card-image">
                            @if (!string.IsNullOrEmpty(correspondent.CorrespondentPhotoUri))
                            {
                                <img src="@correspondent.CorrespondentPhotoUri" alt="@correspondent.Name" />
                            }
                            else
                            {
                                <div class="no-image">
                                    <svg width="100%" height="100%" viewBox="0 0 200 200" preserveAspectRatio="xMidYMid meet" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="200" height="200" rx="8" fill="#F5F7FA" />
                                        <rect x="40" y="60" width="120" height="80" rx="4" stroke="#BDBDBD" stroke-width="4" stroke-dasharray="8 8" />
                                        <path d="M100 75V125" stroke="#BDBDBD" stroke-width="4" stroke-linecap="round" />
                                        <path d="M75 100H125" stroke="#BDBDBD" stroke-width="4" stroke-linecap="round" />
                                    </svg>
                                </div>
                            }
                        </div>
                        <div class="correspondent-card-content">
                            <h3 class="correspondent-name">@correspondent.Name</h3>
                            <div class="correspondent-info">
                                <div class="info-row">
                                    <span class="info-label">대표자:</span>
                                    <span class="info-value">@correspondent.Ceo</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">사업자번호:</span>
                                    <span class="info-value">@FormatBusinessNumber(correspondent.BusinessNumber)</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">연락처:</span>
                                    <span class="info-value">@FormatPhoneNumber(correspondent.PhoneNumber)</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">이메일:</span>
                                    <span class="info-value">@correspondent.Email</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">주소:</span>
                                    <span class="info-value">@correspondent.Address @correspondent.DetailAddress</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@if (_showAddDialog || _showEditDialog)
{
    <HDialog @bind-IsOpen="_showAddDialog" Title=@(_showAddDialog ? "품목 등록" : "품목 수정")>
        <ChildContent>
            <HRow JustifyContent="space-between">
                <HTextInput
                    Id="correspondentName"
                    Label="거래처명"
                    Value="@_currentCorrespondent.Name"
                    ValueChanged="@((value) => _currentCorrespondent.Name = value)"
                    PlaceHolder="거래처명을 입력하세요"
                    Required="true">
                </HTextInput>
                <HDropDown TEnum="CorrespondentType"
                           Id="correspondentType"
                           Label="거래처 유형"
                           Value="@_currentCorrespondent.Type"
                           ValueChanged="@((value) => _currentCorrespondent.Type = value)"
                           PlaceHolder="품목 유형을 선택하세요"
                           Required="true"
                           Items="@_itemTypeOptions">
                </HDropDown>
            </HRow>
            <HRow JustifyContent="space-between">
                <HTextInput
                    Id="correspondentCeo"
                    Label="대표자명"
                    Value="@_currentCorrespondent.Ceo"
                    ValueChanged="@((value) => _currentCorrespondent.Ceo = value)"
                    PlaceHolder="대표자명을 입력하세요">
                </HTextInput>
                <HTextInput
                    Id="correspondentBusinessNumber"
                    Label="사업자번호"
                    Value="@_currentCorrespondent.BusinessNumber"
                    ValueChanged="@((value) => _currentCorrespondent.BusinessNumber = value)"
                    PlaceHolder="사업자번호를 입력하세요"
                    Required="true">
                </HTextInput>
            </HRow>
            <HRow JustifyContent="space-between">
                <HTextInput
                    Id="correspondentPhoneNumber"
                    Label="연락처"
                    Value="@_currentCorrespondent.PhoneNumber"
                    ValueChanged="@((value) => _currentCorrespondent.PhoneNumber = value)"
                    PlaceHolder="연락처를 입력하세요">
                </HTextInput>
                <HTextInput
                    Id="correspondentEmail"
                    Label="이메일"
                    Value="@_currentCorrespondent.Email"
                    ValueChanged="@((value) => _currentCorrespondent.Email = value)"
                    PlaceHolder="이메일을 입력하세요">
                </HTextInput>
            </HRow>
            <HTextInput
                Id="correspondentAddress"
                Label="주소"
                Value="@_currentCorrespondent.Address"
                ValueChanged="@((value) => _currentCorrespondent.Address = value)"
                PlaceHolder="주소를 입력하세요">
            </HTextInput>
            <HTextInput
                Id="correspondentDetailAddress"
                Label="상세주소"
                Value="@_currentCorrespondent.DetailAddress"
                ValueChanged="@((value) => _currentCorrespondent.DetailAddress = value)"
                PlaceHolder="상세주소를 입력하세요">
            </HTextInput>
            <HTextArea
                Id="correspondentNote"
                Label="비고"
                Value="@_currentCorrespondent.Note"
                ValueChanged="@((value) => _currentCorrespondent.Note = value)"
                PlaceHolder="비고를 입력하세요">
            </HTextArea>
            <div class="form-row">
                <div class="form-group photo-upload">
                    <label>거래처 이미지</label>
                    <div class="photo-preview-container">
                        @if (!string.IsNullOrEmpty(_currentCorrespondent.CorrespondentPhotoUri))
                        {
                            <div class="photo-preview">
                                <img src="@_currentCorrespondent.CorrespondentPhotoUri" alt="거래처 이미지" />
                                <button class="remove-photo" >×</button>
                            </div>
                        }
                        else
                        {
                            <div class="upload-placeholder" >
                                <i class="fas fa-cloud-upload-alt"></i>
                                <p>이미지 업로드</p>
                                <small>JPG, PNG 파일 (최대 5MB)</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </ChildContent>
        <FooterContent>
            <HButton OnClick="SaveCorrespondent">
                @(_showAddDialog ? "등록" : "수정")
            </HButton>
        </FooterContent>
    </HDialog>
}

<HDialog @bind-IsOpen="_showDeleteDialog" Title="거래처 삭제">
    <ChildContent>
        <div class="delete-dialog-content">
            <div class="delete-warning-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/>
                    <line x1="12" y1="9" x2="12" y2="13"/>
                    <line x1="12" y1="17" x2="12.01" y2="17"/>
                </svg>
            </div>
            <p class="delete-warning-text">
                <strong>@_correspondentToDelete?.Name</strong> 거래처를 정말 삭제하시겠습니까?
            </p>
            <p class="delete-warning-subtext">
                이 작업은 되돌릴 수 없으며, 이 거래처를 참조하는 모든 데이터가 영향을 받을 수 있습니다.
            </p>
        </div>
    </ChildContent>
    <FooterContent>
        <HButton OnClick="DeleteCorrespondent">
            삭제
        </HButton>
    </FooterContent>
</HDialog>

@code {
    // 상태 변수
    private bool _isLoading = true;
    private List<Correspondent> _correspondents = new List<Correspondent>();
    private List<Correspondent> _filteredCorrespondents = new List<Correspondent>();
    private string _searchTerm = string.Empty;
    private CorrespondentType? _activeFilter = null;
    private ViewMode _viewMode = ViewMode.Card;
    private string _currentSortField = "name";
    private bool _sortAscending = true;

    // 다이얼로그 관련 변수
    private bool _showAddDialog = false;
    private bool _showEditDialog = false;
    private bool _showDeleteDialog = false;
    private Correspondent _currentCorrespondent = new Correspondent();
    private Correspondent? _correspondentToDelete;
    private int? _editCorrespondentId;

    private List<HDropDown<CorrespondentType>.DropDownItem> _itemTypeOptions = new()
    {
        new() { Value = CorrespondentType.Sales.ToString(), Text = "매출" },
        new() { Value = CorrespondentType.Purchase.ToString(), Text = "매입" },
        new() { Value = CorrespondentType.Both.ToString(), Text = "매출/매입" },
    };
    
    protected override async Task OnInitializedAsync()
    {
        _currentSortField = "date";
        _sortAscending = false;
        
        await LoadCorrespondents();
    }

    public void Dispose()
    {
        // 필요한 리소스 정리 코드
    }

    private async Task LoadCorrespondents()
    {
        _isLoading = true;

        try
        {
            if (_activeFilter != null)
            {
                _correspondents = await CorrespondentService.GetCorrespondentsByTypeAsync(GetCorrespondentTypeDisplayName(_activeFilter));
            }
            else
            {
                _correspondents = await CorrespondentService.GetAllCorrespondentsAsync();
            }

            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"거래처 정보를 불러오는 중 오류가 발생했습니다: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilter(CorrespondentType? filterType)
    {
        _activeFilter = filterType;
        // 필터가 변경될 때는 API에서 다시 로드
        LoadCorrespondents();
    }

    private void ApplyFiltersAndSort()
    {
        if (_correspondents == null)
        {
            _filteredCorrespondents = new List<Correspondent>();
            return;
        }

        // 검색어 필터 적용
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredCorrespondents = new List<Correspondent>(_correspondents);
        }
        else
        {
            var term = _searchTerm.ToLower();
            _filteredCorrespondents = _correspondents
                .Where(c =>
                    c.Name.ToLower().Contains(term) ||
                    c.Ceo.ToLower().Contains(term) ||
                    c.BusinessNumber.Replace("-", "").Contains(term))
                .ToList();
        }

        // 정렬 적용
        SortCorrespondents();
    }

    private void SortItems(string field)
    {
        if (_currentSortField == field)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _currentSortField = field;
            _sortAscending = true;
        }

        SortCorrespondents();
    }

    private void SortCorrespondents()
    {
        if (_filteredCorrespondents == null)
            return;

        switch (_currentSortField)
        {
            case "name":
                _filteredCorrespondents = _sortAscending
                    ? _filteredCorrespondents.OrderBy(c => c.Name).ToList()
                    : _filteredCorrespondents.OrderByDescending(c => c.Name).ToList();
                break;
            case "type":
                _filteredCorrespondents = _sortAscending
                    ? _filteredCorrespondents.OrderBy(c => c.Type).ToList()
                    : _filteredCorrespondents.OrderByDescending(c => c.Type).ToList();
                break;
            case "ceo":
                _filteredCorrespondents = _sortAscending
                    ? _filteredCorrespondents.OrderBy(c => c.Ceo).ToList()
                    : _filteredCorrespondents.OrderByDescending(c => c.Ceo).ToList();
                break;
            case "businessNumber":
                _filteredCorrespondents = _sortAscending
                    ? _filteredCorrespondents.OrderBy(c => c.BusinessNumber).ToList()
                    : _filteredCorrespondents.OrderByDescending(c => c.BusinessNumber).ToList();
                break;
            case "date":
            default:
                // 기본적으로 날짜 필드로 정렬하며, 최신 항목이 먼저 오도록 내림차순 정렬
                _filteredCorrespondents = _sortAscending
                    ? _filteredCorrespondents.OrderBy(c => c.CreatedAt).ToList()
                    : _filteredCorrespondents.OrderByDescending(c => c.CreatedAt).ToList();
                break;
        }
    }

    private string GetSortIcon(string field)
    {
        if (_currentSortField != field)
            return string.Empty;

        return _sortAscending ? "↑" : "↓";
    }

    private string GetCorrespondentTypeClass(CorrespondentType type)
    {
        return type switch
        {
            CorrespondentType.Sales => "type-sales",
            CorrespondentType.Purchase=> "type-purchase",
            CorrespondentType.Both => "type-both",
            _ => "type-other"
        };
    }

    private string GetCorrespondentTypeDisplayName(CorrespondentType? type)
    {
        return type switch
        {
            CorrespondentType.Sales => "매출",
            CorrespondentType.Purchase => "매입",
            CorrespondentType.Both => "매출/매입",
            _ => type.ToString()
        };
    }
    
    private string FormatBusinessNumber(string number)
    {
        if (string.IsNullOrEmpty(number))
            return string.Empty;

        // 사업자 번호 형식 (000-00-00000)으로 포맷팅
        if (number.Length == 10)
        {
            return $"{number.Substring(0, 3)}-{number.Substring(3, 2)}-{number.Substring(5)}";
        }

        return number;
    }

    private string FormatPhoneNumber(string number)
    {
        if (string.IsNullOrEmpty(number))
            return string.Empty;

        // 이미 형식화된 번호는 그대로 반환
        if (number.Contains("-"))
            return number;

        // 10자리 번호 (02-XXXX-XXXX 또는 010-XXX-XXXX)
        if (number.Length == 10)
        {
            if (number.StartsWith("02"))
                return $"02-{number.Substring(2, 4)}-{number.Substring(6)}";
            else
                return $"{number.Substring(0, 3)}-{number.Substring(3, 3)}-{number.Substring(6)}";
        }
        // 11자리 번호 (010-XXXX-XXXX)
        else if (number.Length == 11)
        {
            return $"{number.Substring(0, 3)}-{number.Substring(3, 4)}-{number.Substring(7)}";
        }

        return number;
    }

    private void ClearSearch()
    {
        _searchTerm = string.Empty;
        ApplyFiltersAndSort();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _activeFilter = null;
        LoadCorrespondents();
    }

    private void OpenAddCorrespondentDialog()
    {
        _showAddDialog = true;
        _showEditDialog = false;
        _editCorrespondentId = null;
        _currentCorrespondent = new Correspondent
        {
            Type = CorrespondentType.Sales, // 기본값 설정
            CreatedAt = DateTime.Now
        };
    }

    private void OpenEditCorrespondentDialog(Correspondent correspondent)
    {
        _showAddDialog = false;
        _showEditDialog = true;
        _editCorrespondentId = correspondent.CorrespondentId;

        // 깊은 복사를 위해 속성 하나씩 복사
        _currentCorrespondent = new Correspondent
        {
            CorrespondentId = correspondent.CorrespondentId,
            Name = correspondent.Name,
            Type = correspondent.Type,
            Ceo = correspondent.Ceo,
            BusinessNumber = correspondent.BusinessNumber,
            PhoneNumber = correspondent.PhoneNumber,
            Email = correspondent.Email,
            Address = correspondent.Address,
            DetailAddress = correspondent.DetailAddress,
            Note = correspondent.Note,
            CorrespondentPhotoUri = correspondent.CorrespondentPhotoUri,
            CreatedAt = correspondent.CreatedAt
        };
    }

    private void ConfirmDeleteCorrespondent(Correspondent correspondent)
    {
        _correspondentToDelete = correspondent;
        _showDeleteDialog = true;
    }

    private void CloseDialog()
    {
        _showAddDialog = false;
        _showEditDialog = false;
        _currentCorrespondent = new Correspondent();
        _editCorrespondentId = null;
    }

    private void CloseDeleteDialog()
    {
        _showDeleteDialog = false;
        _correspondentToDelete = null;
    }

    private async Task DeleteCorrespondent()
    {
        if (_correspondentToDelete == null)
            return;

        try
        {
            var result = await CorrespondentService.DeleteCorrespondentAsync(_correspondentToDelete.CorrespondentId);
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert", "거래처가 성공적으로 삭제되었습니다.");
                await LoadCorrespondents();
                CloseDeleteDialog();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "거래처 삭제에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"오류 발생: {ex.Message}");
        }
    }

    private enum ViewMode
    {
        List,
        Card
    }
    
    private async Task AddCorrespondent()
    {
        try
        {
            string correspondentTypeStr = _currentCorrespondent.Type switch
            {
                CorrespondentType.Sales => "매출",
                CorrespondentType.Purchase => "매입",
                CorrespondentType.Both => "매출/매입",
                _ => _currentCorrespondent.Type.ToString()
            };
            
            // 새 거래처 추가 요청 객체 생성
            var createRequest = new CreateCorrespondentRequest
            {
                Name = _currentCorrespondent.Name,
                Type = correspondentTypeStr,
                Ceo = _currentCorrespondent.Ceo,
                BusinessNumber = _currentCorrespondent.BusinessNumber,
                PhoneNumber = _currentCorrespondent.PhoneNumber,
                Email = _currentCorrespondent.Email,
                Address = _currentCorrespondent.Address,
                DetailAddress = _currentCorrespondent.DetailAddress,
                Note = _currentCorrespondent.Note,
                CorrespondentPhotoUri = _currentCorrespondent.CorrespondentPhotoUri
            };
            
            // 서비스를 통해 API 호출
            var result = await CorrespondentService.CreateCorrespondentAsync(createRequest);
            
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "거래처가 성공적으로 등록되었습니다.");
                await LoadCorrespondents(); // 데이터 다시 로드
                CloseCorrespondentDialog(); // 다이얼로그 닫기
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "거래처 등록에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"거래처 등록 중 오류가 발생했습니다: {ex.Message}");
            Console.WriteLine($"AddCorrespondent error: {ex.Message}");
        }
    }

    // 기존 SaveCorrespondent 함수를 수정하여 AddCorrespondent와 UpdateCorrespondent로 분리
    private async Task SaveCorrespondent()
    {
        if (_editCorrespondentId == null)
        {
            await AddCorrespondent();
        }
        else
        {
            await UpdateCorrespondent();
        }
    }

    // UpdateCorrespondent 함수도 추가
    private async Task UpdateCorrespondent()
    {
        string correspondentTypeStr = _currentCorrespondent.Type switch
        {
            CorrespondentType.Sales => "매출",
            CorrespondentType.Purchase => "매입",
            CorrespondentType.Both => "매출/매입",
            _ => _currentCorrespondent.Type.ToString()
        };

        if (_editCorrespondentId == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "수정할 거래처 정보를 찾을 수 없습니다.");
            return;
        }

        try
        {
            // 거래처 수정 요청 객체 생성
            var updateRequest = new UpdateCorrespondentRequest
            {
                Name = _currentCorrespondent.Name,
                Type = correspondentTypeStr,
                Ceo = _currentCorrespondent.Ceo,
                BusinessNumber = _currentCorrespondent.BusinessNumber,
                PhoneNumber = _currentCorrespondent.PhoneNumber,
                Email = _currentCorrespondent.Email,
                Address = _currentCorrespondent.Address,
                DetailAddress = _currentCorrespondent.DetailAddress,
                Note = _currentCorrespondent.Note,
                CorrespondentPhotoUri = _currentCorrespondent.CorrespondentPhotoUri
            };
            
            // 서비스를 통해 API 호출
            var result = await CorrespondentService.UpdateCorrespondentAsync(_editCorrespondentId.Value, updateRequest);
            
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "거래처가 성공적으로 수정되었습니다.");
                await LoadCorrespondents(); // 데이터 다시 로드
                CloseCorrespondentDialog(); // 다이얼로그 닫기
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "거래처 수정에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"거래처 수정 중 오류가 발생했습니다: {ex.Message}");
            Console.WriteLine($"UpdateCorrespondent error: {ex.Message}");
        }
    }
    
    private void CloseCorrespondentDialog()
    {
        _showAddDialog = false;
        _currentCorrespondent = new Correspondent();
        _editCorrespondentId = null;
    }
}