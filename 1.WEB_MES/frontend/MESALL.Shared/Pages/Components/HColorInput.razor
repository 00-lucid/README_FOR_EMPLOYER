<div class="form-group">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id">@Label</label>
    }
    <div class="input-wrapper">
        <input
            type="text"
            id="@Id"
            value="@Value"
            placeholder="@PlaceHolder"
            class="@GetInputClass()"
            @onblur="OnBlur"
            @oninput="HandleTextInput"
            @attributes="AdditionalAttributes"
        />

        <div class="color-preview" @onclick="ToggleColorPicker">
            <div class="color-swatch" style="background-color: @Value"></div>
        </div>

        @if (ShowColorPicker)
        {
            <div class="color-picker-popup" @onclick:stopPropagation="true">
                <div class="color-picker-header">
                    <span>색상 선택</span>
                    <button type="button" class="close-button" @onclick="ToggleColorPicker">×</button>
                </div>

                <input
                    type="color"
                    class="color-picker"
                    value="@_tempColor"
                    @onchange="HandleColorChange"
                    @onblur="HandleColorBlur" />

                <div class="preset-colors">
                    @foreach (var color in PresetColors)
                    {
                        <div
                            class="preset-color @(_tempColor.ToLower() == color.ToLower() ? "selected" : "")"
                            style="background-color: @color"
                            @onclick="() => SelectPresetColor(color)">
                        </div>
                    }
                </div>

                <div class="color-input-group">
                    <input
                        type="text"
                        class="hex-input"
                        value="@_tempColor"
                        maxlength="7"
                        placeholder="#RRGGBB"
                        @oninput="HandleHexInput" />
                    <button type="button" class="apply-button" @onclick="ApplyColor">적용</button>
                </div>
            </div>
        }
    </div>

    @if (HasError && !string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">
            @ErrorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = "#3788d8";

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string? PlaceHolder { get; set; } = "#RRGGBB";

    [Parameter]
    public Func<string, string?>? Validation { get; set; }

    [Parameter]
    public EventCallback<bool> OnValidationChange { get; set; }

    [Parameter]
    public string[] PresetColors { get; set; } = new[]
    {
        "#3788d8", "#ff6347", "#32cd32", "#ffd700", "#8a2be2",
        "#ff69b4", "#00ced1", "#ff8c00", "#2f4f4f", "#9370db"
    };

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private bool ShowColorPicker { get; set; } = false;
    private string? ErrorMessage { get; set; }
    private bool HasError => !string.IsNullOrEmpty(ErrorMessage);
    private bool IsValidated { get; set; } = false;
    private bool _isValid = false;
    public bool IsValid => _isValid;

    // 임시 색상 값 (적용 버튼 누르기 전까지 사용)
    private string _tempColor = "";

    // 컴포넌트 초기화 시 임시 색상 값에 현재 값 설정
    protected override void OnInitialized()
    {
        _tempColor = Value;
    }

    // 프로퍼티 변경 시 임시 색상 값도 업데이트
    protected override void OnParametersSet()
    {
        if (!ShowColorPicker) // 컬러 피커가 열려있지 않을 때만 업데이트
        {
            _tempColor = Value;
        }
    }

    // 컬러 피커 토글
    private void ToggleColorPicker()
    {
        ShowColorPicker = !ShowColorPicker;
        if (ShowColorPicker)
        {
            _tempColor = Value; // 컬러 피커 열릴 때 임시 값 초기화
        }
    }

    // 컬러 피커 포커스 잃을 때 처리
    private void HandleColorBlur()
    {
        // 포커스 잃을 때 바로 닫지 않고, 다른 요소에 포커스가 이동했을 때만 닫히도록 함
    }

    // 색상 변경 이벤트 핸들러
    private void HandleColorChange(ChangeEventArgs e)
    {
        if (e.Value is string newColor)
        {
            _tempColor = newColor.ToLower(); // 임시 값만 업데이트
            StateHasChanged(); // UI 강제 업데이트
        }
    }

    // 텍스트 입력 처리
    private async Task HandleTextInput(ChangeEventArgs e)
    {
        if (e.Value is string newValue)
        {
            string color = newValue.Trim();

            // # 없이 입력했을 경우 추가
            if (!string.IsNullOrEmpty(color) && !color.StartsWith("#"))
            {
                color = "#" + color;
            }

            Value = color;
            await ValueChanged.InvokeAsync(Value);
            await ValidateInput();
        }
    }

    // 16진수 색상 코드 입력 처리
    private void HandleHexInput(ChangeEventArgs e)
    {
        if (e.Value is string newValue)
        {
            string color = newValue.Trim();

            // # 없이 입력했을 경우 추가
            if (!string.IsNullOrEmpty(color) && !color.StartsWith("#"))
            {
                color = "#" + color;
            }

            _tempColor = color;
            StateHasChanged(); // UI 강제 업데이트
        }
    }

    // 프리셋 색상 선택
    private void SelectPresetColor(string color)
    {
        _tempColor = color.ToLower();
        StateHasChanged(); // UI 강제 업데이트
    }

    // 색상 적용
    private async Task ApplyColor()
    {
        Value = _tempColor;
        await ValueChanged.InvokeAsync(Value);
        await ValidateInput();
        ShowColorPicker = false;
    }

    // 포커스를 잃었을 때 유효성 검사 실행
    private async Task OnBlur()
    {
        await ValidateInput();
    }

    private async Task ValidateInput()
    {
        IsValidated = true;
        bool oldIsValid = _isValid;

        // 기본 색상 형식 검사
        if (!IsValidColorFormat(Value))
        {
            ErrorMessage = "올바른 색상 형식이 아닙니다. (#RRGGBB 형식으로 입력해주세요)";
            _isValid = false;
        }
        else if (Validation != null)
        {
            ErrorMessage = Validation(Value);
            _isValid = string.IsNullOrEmpty(ErrorMessage);
        }
        else
        {
            ErrorMessage = null;
            _isValid = true;
        }

        // 유효성 상태가 변경되었을 때만 이벤트 발생
        if (oldIsValid != _isValid)
        {
            await OnValidationChange.InvokeAsync(_isValid);
        }
    }

    // 색상 형식 검사 (16진수 색상 코드 #RRGGBB 또는 #RGB)
    private bool IsValidColorFormat(string color)
    {
        if (string.IsNullOrEmpty(color)) return false;

        // 정규식으로 #RRGGBB 또는 #RGB 형식인지 확인
        return System.Text.RegularExpressions.Regex.IsMatch(
            color,
            @"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
        );
    }

    private string GetInputClass()
    {
        if (!IsValidated) // 아직 유효성 검사가 되지 않은 경우
        {
            return "form-control";
        }

        if (HasError) // 오류가 있는 경우
        {
            return "form-control error";
        }

        // 유효성 검사가 통과된 경우
        return "form-control valid";
    }
}