@page "/sales-summary"
@using System.Text.Json
@using System.Net.Http.Json
@using MESALL.Shared.Enums
@using MESALL.Shared.Models
@using MESALL.Shared.Pages.Components
@using MESALL.Shared.Interfaces
@using MESALL.Shared.Pages.Components
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="page-container">
    <header class="page-header">
        <div class="header-title">
            <h1>매출 관리</h1>
            <span class="sales-count">총 @(_filteredSales?.Count ?? 0)건의 매출</span>
        </div>
    </header>

    <div class="dashboard-section">
        <div class="sales-summary-cards">
            <div class="summary-card total-sales">
                <div class="card-content">
                    <div class="card-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 4V20M18 8L6 16M6 8L18 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                    <div class="card-info">
                        <h3>전체 매출액</h3>
                        <p class="amount">@(string.Format("{0:N0}", _totalAmount))원</p>
                    </div>
                </div>
                <div class="card-footer">
                    <span class="trend @(_salesTrend > 0 ? "positive" : _salesTrend < 0 ? "negative" : "")">
                        @if (_salesTrend > 0)
                        {
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8 4L12 8L8 12M4 8H12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <span>@string.Format("{0:P1}", _salesTrend)</span>
                        }
                        else if (_salesTrend < 0)
                        {
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8 12L4 8L8 4M12 8H4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <span>@string.Format("{0:P1}", Math.Abs(_salesTrend))</span>
                        }
                        else
                        {
                            <span>변동 없음</span>
                        }
                    </span>
                    <span class="period">전월 대비</span>
                </div>
            </div>
            
            <div class="summary-card net-sales">
                <div class="card-content">
                    <div class="card-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect x="3" y="6" width="18" height="15" rx="2" stroke="currentColor" stroke-width="2"/>
                            <path d="M4 11H20" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <path d="M9 16H15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <path d="M8 3L8 7" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <path d="M16 3L16 7" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                        </svg>
                    </div>
                    <div class="card-info">
                        <h3>공급가액</h3>
                        <p class="amount">@(string.Format("{0:N0}", _netAmount))원</p>
                    </div>
                </div>
                <div class="card-footer">
                    <span class="percent">@(string.Format("{0:P1}", (double)_netAmount / (double)_totalAmount))</span>
                    <span class="period">전체 매출 대비</span>
                </div>
            </div>
            
            <div class="summary-card tax-amount">
                <div class="card-content">
                    <div class="card-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9 14L15 8M9.5 8.5H9.51M14.5 13.5H14.51M19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                    <div class="card-info">
                        <h3>부가세</h3>
                        <p class="amount">@(string.Format("{0:N0}", _taxAmount))원</p>
                    </div>
                </div>
                <div class="card-footer">
                    <span class="percent">@(string.Format("{0:P1}", (double)_taxAmount / (double)_totalAmount))</span>
                    <span class="period">전체 매출 대비</span>
                </div>
            </div>
            
            <div class="summary-card customer-count">
                <div class="card-content">
                    <div class="card-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M20 21C20 16.5817 16.4183 13 12 13C7.58172 13 4 16.5817 4 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div>
                    <div class="card-info">
                        <h3>거래 고객</h3>
                        <p class="amount">@_uniqueCustomerCount 개사</p>
                    </div>
                </div>
                <div class="card-footer">
                    <span class="trend @(_customerTrend > 0 ? "positive" : _customerTrend < 0 ? "negative" : "")">
                        @if (_customerTrend > 0)
                        {
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8 4L12 8L8 12M4 8H12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <span>@string.Format("{0:+#;-#;0}", _newCustomerCount)개사</span>
                        }
                        else if (_customerTrend < 0)
                        {
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8 12L4 8L8 4M12 8H4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <span>@string.Format("{0:+#;-#;0}", _newCustomerCount)개사</span>
                        }
                        else
                        {
                            <span>변동 없음</span>
                        }
                    </span>
                    <span class="period">전월 대비</span>
                </div>
            </div>
        </div>
    </div>
    
    <div class="chart-section">
        <div class="chart-container">
            <div class="chart-header">
                <h2>거래처별 매출 현황</h2>
                <div class="chart-controls">
                    <div class="period-selector">
                        <button class="@(_selectedPeriod == "month" ? "active" : "")" @onclick="@(() => ChangeChartPeriod("month"))">월별</button>
                        <button class="@(_selectedPeriod == "quarter" ? "active" : "")" @onclick="@(() => ChangeChartPeriod("quarter"))">분기별</button>
                        <button class="@(_selectedPeriod == "year" ? "active" : "")" @onclick="@(() => ChangeChartPeriod("year"))">연도별</button>
                    </div>
                </div>
            </div>
            <div class="chart-body">
                <div class="chart-visualization">
                    @foreach (var item in _customerSalesData)
                    {
                        <div class="chart-bar-item">
                            <div class="chart-label">@item.CustomerName</div>
                            <div class="chart-bar-container">
                                <div class="chart-bar" style="width: @(item.Percentage)%">
                                    <span class="chart-value">@(string.Format("{0:N0}", item.TotalAmount))원</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="chart-container">
            <div class="chart-header">
                <h2>품목별 매출 현황</h2>
                <div class="chart-controls">
                    <div class="chart-type-selector">
                        <button class="@(_selectedChartType == "bar" ? "active" : "")" @onclick="@(() => _selectedChartType = "bar")">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M2 13V3M6 13V6M10 13V9M14 13V7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                        <button class="@(_selectedChartType == "pie" ? "active" : "")" @onclick="@(() => _selectedChartType = "pie")">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8 3V8H13M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            <div class="chart-body">
                @if (_selectedChartType == "bar")
                {
                    <div class="chart-visualization">
                        @foreach (var item in _itemSalesData)
                        {
                            <div class="chart-bar-item">
                                <div class="chart-label">@item.ItemName</div>
                                <div class="chart-bar-container">
                                    <div class="chart-bar" style="width: @(item.Percentage)%">
                                        <span class="chart-value">@(string.Format("{0:N0}", item.TotalAmount))원</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="pie-chart-visualization">
                        <div class="pie-chart">
                            <div class="pie-segments">
                                @{
                                    double startAngle = 0;
                                    foreach (var item in _itemSalesData)
                                    {
                                        double angle = item.Percentage * 3.6; // 퍼센트를 각도로 변환 (100% = 360도)
                                        <div class="pie-segment" style="--start-angle: @(startAngle)deg; --end-angle: @(startAngle + angle)deg"></div>
                                        startAngle += angle;
                                    }
                                }
                            </div>
                        </div>
                        <div class="pie-legend">
                            @foreach (var item in _itemSalesData)
                            {
                                <div class="legend-item">
                                    <div class="legend-color" style="background-color: var(@(_itemSalesData.IndexOf(item) % 10))"></div>
                                    <div class="legend-label">@item.ItemName</div>
                                    <div class="legend-value">@(string.Format("{0:P1}", item.Percentage / 100))</div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <HRow JustifyContent="space-between" AlignItems="center">
        <div class="filters-section">
            <div class="filter-tag @(_activeCorrespondentFilter == null ? "active" : "")" @onclick='() => ApplyCorrespondentFilter(null)'>
                전체 거래처
            </div>
            @foreach (var correspondent in _topCorrespondents)
            {
                <div class="filter-tag @(_activeCorrespondentFilter == correspondent.CorrespondentId ? "active" : "")" 
                     @onclick='() => ApplyCorrespondentFilter(correspondent.CorrespondentId)'>
                    @correspondent.Name
                </div>
            }
            @if (_topCorrespondents.Count < _correspondents.Count)
            {
                <div class="filter-tag more-filter" @onclick="ShowMoreCorrespondents">
                    더보기
                    <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6 9L10 5L6 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
            }
        </div>

        <HRow AutoWidth="true" Gap="1rem" AlignItems="center">
            <div class="date-filter">
                <input type="date" class="date-input" value="@_startDate.ToString("yyyy-MM-dd")" @onchange="(e) => UpdateDateRange(e.Value, true)" />
                <span>~</span>
                <input type="date" class="date-input" value="@_endDate.ToString("yyyy-MM-dd")" @onchange="(e) => UpdateDateRange(e.Value, false)" />
            </div>
            
            <HTextInput
                Width="300px"
                PlaceHolder="거래처명, 품목명 검색"
                Value="@_searchTerm"
                ValueChanged="@((value) => { _searchTerm = value; ApplyFiltersAndSort(); })"
                MarginBottom="0"
            >
                @if (!string.IsNullOrEmpty(_searchTerm))
                {
                    <button class="clear-search" @onclick="ClearSearch">×</button>
                }
            </HTextInput>

            <div class="view-toggle">
                <button class="view-toggle-btn @(_viewMode == ViewMode.List ? "active" : "")" @onclick="() => _viewMode = ViewMode.List">
                    <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2 4H16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                        <path d="M2 9H16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                        <path d="M2 14H16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                    </svg>
                </button>
                <button class="view-toggle-btn @(_viewMode == ViewMode.Card ? "active" : "")" @onclick="() => _viewMode = ViewMode.Card">
                    <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect x="2" y="2" width="6" height="6" rx="1" stroke="currentColor" stroke-width="1.5"/>
                        <rect x="10" y="2" width="6" height="6" rx="1" stroke="currentColor" stroke-width="1.5"/>
                        <rect x="2" y="10" width="6" height="6" rx="1" stroke="currentColor" stroke-width="1.5"/>
                        <rect x="10" y="10" width="6" height="6" rx="1" stroke="currentColor" stroke-width="1.5"/>
                    </svg>
                </button>
            </div>
            
            @* <HButton OnClick="ShowInvoiceDialog"> *@
            @*     <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.5rem;"> *@
            @*         <path d="M12 1H4C3.44772 1 3 1.44772 3 2V14C3 14.5523 3.44772 15 4 15H12C12.5523 15 13 14.5523 13 14V2C13 1.44772 12.5523 1 12 1Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> *@
            @*         <path d="M5 4H11" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> *@
            @*         <path d="M5 7H11" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> *@
            @*         <path d="M5 10H8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> *@
            @*     </svg> *@
            @*     거래명세표 출력 *@
            @* </HButton> *@
        </HRow>
    </HRow>

    @if (_isLoading)
    {
        <HLoading LoadingText="매출 정보를 불러오는 중입니다..." />
    }
    else if (_filteredSales == null || _filteredSales.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect width="80" height="80" rx="40" fill="#F5F7FA"/>
                    <path d="M30 27H50C51.1046 27 52 27.8954 52 29V51C52 52.1046 51.1046 53 50 53H30C28.8954 53 28 52.1046 28 51V29C28 27.8954 28.8954 27 30 27Z" stroke="#BDBDBD" stroke-width="2"/>
                    <path d="M28 33H52" stroke="#BDBDBD" stroke-width="2"/>
                    <path d="M32 39H48" stroke="#BDBDBD" stroke-width="2" stroke-linecap="round"/>
                    <path d="M32 45H44" stroke="#BDBDBD" stroke-width="2" stroke-linecap="round"/>
                    <path d="M38 27V23" stroke="#BDBDBD" stroke-width="2" stroke-linecap="round"/>
                    <path d="M44 27V23" stroke="#BDBDBD" stroke-width="2" stroke-linecap="round"/>
                </svg>
            </div>
            <h3>매출 내역이 없습니다</h3>
            @if (!string.IsNullOrEmpty(_searchTerm) || _activeCorrespondentFilter != null || _startDate != DateTime.Today.AddMonths(-3) || _endDate != DateTime.Today)
            {
                <p>검색어 또는 필터에 해당하는 매출 내역이 없습니다.</p>
                <button class="secondary-btn" @onclick="ClearFilters">
                    필터 초기화
                </button>
            }
            else
            {
                <p>아직 등록된 매출 내역이 없습니다.</p>
            }
        </div>
    }
    else
    {
        @if (_viewMode == ViewMode.List)
        {
            <div class="list-view">
                <table>
                    <thead>
                    <tr>
                        <th @onclick='() => SortSales("date")' class="sortable-header">
                            거래일자 @GetSortIcon("date")
                        </th>
                        <th @onclick='() => SortSales("correspondent")' class="sortable-header">
                            거래처 @GetSortIcon("correspondent")
                        </th>
                        <th @onclick='() => SortSales("item")' class="sortable-header">
                            품목 @GetSortIcon("item")
                        </th>
                        <th>수량</th>
                        <th @onclick='() => SortSales("netAmount")' class="sortable-header">
                            공급가액 @GetSortIcon("netAmount")
                        </th>
                        <th @onclick='() => SortSales("taxAmount")' class="sortable-header">
                            부가세 @GetSortIcon("taxAmount")
                        </th>
                        <th @onclick='() => SortSales("totalAmount")' class="sortable-header">
                            합계 @GetSortIcon("totalAmount")
                        </th>
                        <th>관리</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var sale in _filteredSales)
                    {
                        <tr>
                            <td>@sale.SaleDate.ToString("yyyy-MM-dd")</td>
                            <td>@sale.CorrespondentName</td>
                            <td>@sale.ItemName</td>
                            <td>@sale.Quantity.ToString("N0") @sale.Unit</td>
                            <td>@sale.NetAmount.ToString("N0")원</td>
                            <td>@sale.TaxAmount.ToString("N0")원</td>
                            <td class="total-amount">@sale.TotalAmount.ToString("N0")원</td>
                            <td class="actions-cell">
                                <button class="icon-btn detail-btn" @onclick="() => ShowSaleDetail(sale)">
                                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M8 3.5V8L10.5 10.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        <circle cx="8" cy="8" r="6" stroke="currentColor" stroke-width="1.5"/>
                                    </svg>
                                </button>
                                <button class="icon-btn invoice-btn" @onclick="() => PrintInvoice(sale)">
                                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M4 1H12V4H4V1Z" stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
                                        <path d="M4 10H12V15H4V10Z" stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
                                        <path d="M2 4H14V10H2V4Z" stroke="currentColor" stroke-width="1.5"/>
                                        <path d="M5 7H6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                    <tfoot>
                    <tr>
                        <td colspan="4" class="summary-label">합계</td>
                        <td class="summary-value">@_filteredSales.Sum(s => s.NetAmount).ToString("N0")원</td>
                        <td class="summary-value">@_filteredSales.Sum(s => s.TaxAmount).ToString("N0")원</td>
                        <td class="summary-value total-amount">@_filteredSales.Sum(s => s.TotalAmount).ToString("N0")원</td>
                        <td></td>
                    </tr>
                    </tfoot>
                </table>
            </div>
        }
        else
        {
            <div class="card-view">
                @foreach (var sale in _filteredSales)
                {
                    <div class="sale-card">
                        <div class="sale-card-header">
                            <span class="sale-date">@sale.SaleDate.ToString("yyyy-MM-dd")</span>
                            <div class="card-actions">
                                <button class="icon-btn detail-btn" @onclick="() => ShowSaleDetail(sale)">
                                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M8 3.5V8L10.5 10.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        <circle cx="8" cy="8" r="6" stroke="currentColor" stroke-width="1.5"/>
                                    </svg>
                                </button>
                                <button class="icon-btn invoice-btn" @onclick="() => PrintInvoice(sale)">
                                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M4 1H12V4H4V1Z" stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
                                        <path d="M4 10H12V15H4V10Z" stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
                                        <path d="M2 4H14V10H2V4Z" stroke="currentColor" stroke-width="1.5"/>
                                        <path d="M5 7H6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="sale-card-content">
                            <div class="correspondent-info">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M8 8C9.65685 8 11 6.65685 11 5C11 3.34315 9.65685 2 8 2C6.34315 2 5 3.34315 5 5C5 6.65685 6.34315 8 8 8Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M13 14C13 11.7909 10.7614 10 8 10C5.23858 10 3 11.7909 3 14" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                                <span>@sale.CorrespondentName</span>
                            </div>
                            <div class="item-info">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <rect x="2" y="2" width="12" height="12" rx="1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M11 5H5V11H11V5Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                                <span>@sale.ItemName</span>
                            </div>
                            <div class="quantity-info">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M13 3H3C2.44772 3 2 3.44772 2 4V12C2 12.5523 2.44772 13 3 13H13C13.5523 13 14 12.5523 14 12V4C14 3.44772 13.5523 3 13 3Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M8 7V9" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <circle cx="8" cy="6" r="0.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                                <span>@sale.Quantity.ToString("N0") @sale.Unit</span>
                            </div>
                            <div class="sale-amounts">
                                <div class="amount-item">
                                    <span class="amount-label">공급가액</span>
                                    <span class="amount-value">@sale.NetAmount.ToString("N0")원</span>
                                </div>
                                <div class="amount-item">
                                    <span class="amount-label">부가세</span>
                                    <span class="amount-value">@sale.TaxAmount.ToString("N0")원</span>
                                </div>
                                <div class="amount-item total">
                                    <span class="amount-label">합계</span>
                                    <span class="amount-value">@sale.TotalAmount.ToString("N0")원</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<HDialog @bind-IsOpen="_showInvoiceDialog" Title="거래명세표 출력">
    <ChildContent>
        <div class="form-row">
            <div class="form-group">
                <label for="correspondent">거래처 선택</label>
                <select id="correspondent" @bind="_selectedCorrespondentId">
                    <option value="0">전체 거래처</option>
                    @foreach (var correspondent in _correspondents)
                    {
                        <option value="@correspondent.CorrespondentId">@correspondent.Name</option>
                    }
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group">
                <label for="invoiceStartDate">시작일</label>
                <input type="date" id="invoiceStartDate" @bind="_invoiceStartDate" />
            </div>
            
            <div class="form-group">
                <label for="invoiceEndDate">종료일</label>
                <input type="date" id="invoiceEndDate" @bind="_invoiceEndDate" />
            </div>
        </div>
        
        <div class="invoice-preview">
            <div class="invoice-preview-header">
                <h3>미리보기</h3>
                <p>선택한 기간: @_invoiceStartDate.ToString("yyyy-MM-dd") ~ @_invoiceEndDate.ToString("yyyy-MM-dd")</p>
                <p>거래 건수: @(_invoiceSales?.Count ?? 0)건</p>
                <p>금액 합계: @(_invoiceSales?.Sum(s => s.TotalAmount).ToString("N0") ?? "0")원</p>
            </div>
        </div>
    </ChildContent>
    <FooterContent>
        <HButton Color="secondary" OnClick="() => _showInvoiceDialog = false">취소</HButton>
        <HButton Color="primary" OnClick="GenerateInvoice">거래명세표 출력</HButton>
    </FooterContent>
</HDialog>

<HDialog @bind-IsOpen="_showSaleDetailDialog" Title="매출 상세 정보">
    <ChildContent>
        @if (_selectedSale != null)
        {
            <div class="sale-detail">
                <div class="detail-section">
                    <h3>거래 정보</h3>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">거래일자</span>
                            <span class="detail-value">@_selectedSale.SaleDate.ToString("yyyy-MM-dd")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">거래번호</span>
                            <span class="detail-value">@_selectedSale.SaleNumber</span>
                        </div>
                    </div>
                </div>
                
                <div class="detail-section">
                    <h3>거래처 정보</h3>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">거래처명</span>
                            <span class="detail-value">@_selectedSale.CorrespondentName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">사업자번호</span>
                            <span class="detail-value">@_selectedSale.BusinessNumber</span>
                        </div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">대표자</span>
                            <span class="detail-value">@_selectedSale.Ceo</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">연락처</span>
                            <span class="detail-value">@_selectedSale.PhoneNumber</span>
                        </div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-item full-width">
                            <span class="detail-label">주소</span>
                            <span class="detail-value">@_selectedSale.Address</span>
                        </div>
                    </div>
                </div>
                
                <div class="detail-section">
                    <h3>품목 정보</h3>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">품목명</span>
                            <span class="detail-value">@_selectedSale.ItemName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">수량</span>
                            <span class="detail-value">@_selectedSale.Quantity.ToString("N0") @_selectedSale.Unit</span>
                        </div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">단가</span>
                            <span class="detail-value">@(_selectedSale.NetAmount / _selectedSale.Quantity).ToString("N0")원</span>
                        </div>
                    </div>
                </div>
                
                <div class="detail-section">
                    <h3>금액 정보</h3>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">공급가액</span>
                            <span class="detail-value">@_selectedSale.NetAmount.ToString("N0")원</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">부가세</span>
                            <span class="detail-value">@_selectedSale.TaxAmount.ToString("N0")원</span>
                        </div>
                    </div>
                    <div class="detail-row">
                        <div class="detail-item">
                            <span class="detail-label">합계</span>
                            <span class="detail-value total-amount">@_selectedSale.TotalAmount.ToString("N0")원</span>
                        </div>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(_selectedSale.Note))
                {
                    <div class="detail-section">
                        <h3>비고</h3>
                        <div class="detail-row">
                            <div class="detail-item full-width">
                                <span class="detail-value note">@_selectedSale.Note</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </ChildContent>
    <FooterContent>
        <HButton Color="secondary" OnClick="() => _showSaleDetailDialog = false">닫기</HButton>
        <HButton Color="primary" OnClick="() => PrintInvoice(_selectedSale)">거래명세표 출력</HButton>
    </FooterContent>
</HDialog>

<HDialog @bind-IsOpen="_showMoreCorrespondentsDialog" Title="거래처 필터">
    <ChildContent>
        <div class="correspondents-filter-grid">
            @foreach (var correspondent in _correspondents)
            {
                <div class="correspondent-filter-item @(_activeCorrespondentFilter == correspondent.CorrespondentId ? "active" : "")" 
                     @onclick='() => SelectCorrespondentFilter(correspondent.CorrespondentId)'>
                    @correspondent.Name
                </div>
            }
        </div>
    </ChildContent>
    <FooterContent>
        <HButton Color="secondary" OnClick="() => _showMoreCorrespondentsDialog = false">취소</HButton>
        <HButton Color="primary" OnClick="ApplySelectedCorrespondentFilter">적용</HButton>
    </FooterContent>
</HDialog>

@code {
    private List<Sale> _sales = new();
    private List<Sale> _filteredSales = new();
    private List<Correspondent> _correspondents = new();
    private List<Correspondent> _topCorrespondents = new();
    private List<Item> _items = new();
    private bool _isLoading = true;
    private string _searchTerm = "";
    private int? _activeCorrespondentFilter = null;
    private int? _selectedCorrespondentFilterTemp = null;
    private ViewMode _viewMode = ViewMode.List;
    private DateTime _startDate = DateTime.Today.AddMonths(-3);
    private DateTime _endDate = DateTime.Today;
    
    // 정렬 상태
    private string? _sortField;
    private bool _sortAscending = true;
    
    // 차트 관련 데이터
    private List<CustomerSalesData> _customerSalesData = new();
    private List<ItemSalesData> _itemSalesData = new();
    private string _selectedPeriod = "month"; // month, quarter, year
    private string _selectedChartType = "bar"; // bar, pie
    
    // 요약 데이터
    private decimal _totalAmount;
    private decimal _netAmount;
    private decimal _taxAmount;
    private int _uniqueCustomerCount;
    private double _salesTrend; // 전월 대비 매출 증감률
    private int _newCustomerCount; // 전월 대비 신규 고객 수
    private double _customerTrend; // 전월 대비 고객 증감률
    
    // 다이얼로그
    private bool _showInvoiceDialog = false;
    private bool _showSaleDetailDialog = false;
    private bool _showMoreCorrespondentsDialog = false;
    private Sale? _selectedSale;
    private int _selectedCorrespondentId = 0;
    private DateTime _invoiceStartDate = DateTime.Today.AddDays(-30);
    private DateTime _invoiceEndDate = DateTime.Today;
    private List<Sale>? _invoiceSales;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadSalesData();
    }
    
    private async Task LoadSalesData()
    {
        _isLoading = true;
        try
        {
            // 더미 데이터 생성
            GenerateDummyData();
            
            // 데이터 필터링 및 요약 정보 계산
            ApplyFiltersAndSort();
            CalculateSummaryData();
            GenerateChartData();
            
            // 자주 거래하는 상위 5개 거래처 추출
            _topCorrespondents = _correspondents
                .OrderByDescending(c => _sales.Count(s => s.CorrespondentId == c.CorrespondentId))
                .Take(5)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"매출 데이터 로딩 중 오류 발생: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void GenerateDummyData()
    {
        // 거래처 더미 데이터
        _correspondents = new List<Correspondent>
        {
            new Correspondent 
            { 
                CorrespondentId = 1, 
                Name = "삼성전자", 
                Type = CorrespondentType.Sales, 
                Ceo = "김대표", 
                BusinessNumber = "123-45-67890", 
                PhoneNumber = "02-1234-5678", 
                Email = "samsung@example.com",
                Address = "서울시 강남구 삼성로 123",
                DetailAddress = "삼성빌딩 10층",
                CreatedAt = DateTime.Today.AddYears(-2),
                UpdatedAt = DateTime.Today.AddMonths(-3)
            },
            new Correspondent 
            { 
                CorrespondentId = 2, 
                Name = "LG전자", 
                Type = CorrespondentType.Sales, 
                Ceo = "박대표", 
                BusinessNumber = "234-56-78901", 
                PhoneNumber = "02-2345-6789", 
                Email = "lg@example.com",
                Address = "서울시 영등포구 여의대로 128",
                DetailAddress = "LG타워 15층",
                CreatedAt = DateTime.Today.AddYears(-1),
                UpdatedAt = DateTime.Today.AddMonths(-2)
            },
            new Correspondent 
            { 
                CorrespondentId = 3, 
                Name = "현대자동차", 
                Type = CorrespondentType.Sales, 
                Ceo = "이대표", 
                BusinessNumber = "345-67-89012", 
                PhoneNumber = "02-3456-7890", 
                Email = "hyundai@example.com",
                Address = "서울시 서초구 헌릉로 12",
                DetailAddress = "현대빌딩 5층",
                CreatedAt = DateTime.Today.AddYears(-1),
                UpdatedAt = DateTime.Today.AddMonths(-1)
            },
            new Correspondent 
            { 
                CorrespondentId = 4, 
                Name = "SK하이닉스", 
                Type = CorrespondentType.Sales, 
                Ceo = "최대표", 
                BusinessNumber = "456-78-90123", 
                PhoneNumber = "02-4567-8901", 
                Email = "skhynix@example.com",
                Address = "경기도 이천시 부발읍 경충대로 2091",
                DetailAddress = "SK하이닉스캠퍼스",
                CreatedAt = DateTime.Today.AddMonths(-10),
                UpdatedAt = DateTime.Today.AddMonths(-1)
            },
            new Correspondent 
            { 
                CorrespondentId = 5, 
                Name = "롯데케미칼", 
                Type = CorrespondentType.Sales, 
                Ceo = "정대표", 
                BusinessNumber = "567-89-01234", 
                PhoneNumber = "02-5678-9012", 
                Email = "lotte@example.com",
                Address = "서울시 송파구 올림픽로 300",
                DetailAddress = "롯데월드타워 13층",
                CreatedAt = DateTime.Today.AddMonths(-8),
                UpdatedAt = DateTime.Today.AddMonths(-1)
            },
            new Correspondent 
            { 
                CorrespondentId = 6, 
                Name = "포스코", 
                Type = CorrespondentType.Sales, 
                Ceo = "한대표", 
                BusinessNumber = "678-90-12345", 
                PhoneNumber = "02-6789-0123", 
                Email = "posco@example.com",
                Address = "서울시 강남구 테헤란로 440",
                DetailAddress = "포스코센터 3층",
                CreatedAt = DateTime.Today.AddMonths(-7),
                UpdatedAt = DateTime.Today.AddMonths(-1)
            },
            new Correspondent 
            { 
                CorrespondentId = 7, 
                Name = "두산중공업", 
                Type = CorrespondentType.Sales, 
                Ceo = "유대표", 
                BusinessNumber = "789-01-23456", 
                PhoneNumber = "02-7890-1234", 
                Email = "doosan@example.com",
                Address = "경상남도 창원시 의창구 두산볼보로 22",
                DetailAddress = "두산중공업 본관",
                CreatedAt = DateTime.Today.AddMonths(-6),
                UpdatedAt = DateTime.Today.AddMonths(-1)
            },
            new Correspondent 
            { 
                CorrespondentId = 8, 
                Name = "네이버", 
                Type = CorrespondentType.Sales, 
                Ceo = "심대표", 
                BusinessNumber = "890-12-34567", 
                PhoneNumber = "02-8901-2345", 
                Email = "naver@example.com",
                Address = "경기도 성남시 분당구 불정로 6",
                DetailAddress = "네이버 그린팩토리",
                CreatedAt = DateTime.Today.AddMonths(-5),
                UpdatedAt = DateTime.Today.AddMonths(-1)
            }
        };
        
        // 품목 더미 데이터
        _items = new List<Item>
        {
            new Item 
            { 
                ItemId = 1, 
                ItemName = "반도체 부품 A", 
                ItemType = ItemType.Product, 
                Unit = "EA", 
                SalePrice = 150000, 
                CreatedAt = DateTime.Today.AddYears(-1), 
                UpdatedAt = DateTime.Today.AddMonths(-2)
            },
            new Item 
            { 
                ItemId = 2, 
                ItemName = "디스플레이 패널", 
                ItemType = ItemType.Product, 
                Unit = "EA", 
                SalePrice = 250000, 
                CreatedAt = DateTime.Today.AddYears(-1), 
                UpdatedAt = DateTime.Today.AddMonths(-3)
            },
            new Item 
            { 
                ItemId = 3, 
                ItemName = "자동차 부품 B-100", 
                ItemType = ItemType.Product, 
                Unit = "SET", 
                SalePrice = 450000, 
                CreatedAt = DateTime.Today.AddMonths(-10), 
                UpdatedAt = DateTime.Today.AddMonths(-2)
            },
            new Item 
            { 
                ItemId = 4, 
                ItemName = "산업용 로봇 아암", 
                ItemType = ItemType.Product, 
                Unit = "EA", 
                SalePrice = 3500000, 
                CreatedAt = DateTime.Today.AddMonths(-8), 
                UpdatedAt = DateTime.Today.AddMonths(-1)
            },
            new Item 
            { 
                ItemId = 5, 
                ItemName = "특수강 합금", 
                ItemType = ItemType.Row, 
                Unit = "TON", 
                SalePrice = 1200000, 
                CreatedAt = DateTime.Today.AddMonths(-7), 
                UpdatedAt = DateTime.Today.AddMonths(-2)
            }
        };
        
        // 매출 더미 데이터
        var random = new Random();
        _sales = new List<Sale>();
        
        // 현재 날짜에서 3개월 전부터 오늘까지의 더미 데이터 생성
        for (int i = 0; i < 50; i++)
        {
            var saleDate = DateTime.Today.AddDays(-random.Next(0, 90));
            var correspondent = _correspondents[random.Next(0, _correspondents.Count)];
            var item = _items[random.Next(0, _items.Count)];
            var quantity = random.Next(1, 100);
            var unitPrice = item.SalePrice * (1 - (random.Next(-10, 15) / 100.0m)); // 판매가의 +/-10~15% 변동
            var netAmount = Math.Round(unitPrice * quantity);
            var taxAmount = Math.Round(netAmount * 0.1m); // 10% 부가세
            
            _sales.Add(new Sale
            {
                SaleId = i + 1,
                SaleNumber = $"SALE-{DateTime.Now.Year}-{(i + 1).ToString().PadLeft(4, '0')}",
                SaleDate = saleDate,
                CorrespondentId = correspondent.CorrespondentId,
                CorrespondentName = correspondent.Name,
                ItemId = item.ItemId,
                ItemName = item.ItemName,
                Quantity = quantity,
                Unit = item.Unit,
                NetAmount = netAmount,
                TaxAmount = taxAmount,
                TotalAmount = netAmount + taxAmount,
                BusinessNumber = correspondent.BusinessNumber,
                Ceo = correspondent.Ceo,
                PhoneNumber = correspondent.PhoneNumber,
                Address = correspondent.Address + " " + correspondent.DetailAddress,
                Note = i % 5 == 0 ? "특별 할인 적용" : (i % 7 == 0 ? "긴급 배송 요청" : null)
            });
        }
        
        // 날짜순 정렬
        _sales = _sales.OrderByDescending(s => s.SaleDate).ToList();
    }
    
    private void ApplyCorrespondentFilter(int? correspondentId)
    {
        _activeCorrespondentFilter = correspondentId;
        ApplyFiltersAndSort();
    }
    
    private void ShowMoreCorrespondents()
    {
        _selectedCorrespondentFilterTemp = _activeCorrespondentFilter;
        _showMoreCorrespondentsDialog = true;
    }
    
    private void SelectCorrespondentFilter(int correspondentId)
    {
        _selectedCorrespondentFilterTemp = correspondentId == _selectedCorrespondentFilterTemp ? null : correspondentId;
    }
    
    private void ApplySelectedCorrespondentFilter()
    {
        _activeCorrespondentFilter = _selectedCorrespondentFilterTemp;
        _showMoreCorrespondentsDialog = false;
        ApplyFiltersAndSort();
    }
    
    private void ClearSearch()
    {
        _searchTerm = "";
        ApplyFiltersAndSort();
    }
    
    private void ClearFilters()
    {
        _searchTerm = "";
        _activeCorrespondentFilter = null;
        _startDate = DateTime.Today.AddMonths(-3);
        _endDate = DateTime.Today;
        ApplyFiltersAndSort();
    }
    
    private void UpdateDateRange(object? value, bool isStartDate)
    {
        if (value != null && DateTime.TryParse(value.ToString(), out var date))
        {
            if (isStartDate)
                _startDate = date;
            else
                _endDate = date;
                
            ApplyFiltersAndSort();
        }
    }
    
    private void ApplyFiltersAndSort()
    {
        if (_sales == null) 
            return;
            
        // 필터링
        _filteredSales = _sales
            .Where(s => (_activeCorrespondentFilter == null || s.CorrespondentId == _activeCorrespondentFilter) &&
                        (string.IsNullOrEmpty(_searchTerm) || 
                         s.CorrespondentName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                         s.ItemName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                        (s.SaleDate >= _startDate && s.SaleDate <= _endDate))
            .ToList();
            
        // 정렬
        if (!string.IsNullOrEmpty(_sortField))
        {
            SortSales(_sortField, false);
        }
        else
        {
            // 기본 정렬: 거래일 기준 내림차순
            _filteredSales = _filteredSales.OrderByDescending(s => s.SaleDate).ToList();
        }
        
        // 명세서 미리보기 데이터 업데이트
        UpdateInvoicePreview();
    }
    
    private void SortSales(string field, bool toggleDirection = true)
    {
        if (_sortField == field && toggleDirection)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _sortField = field;
            _sortAscending = true;
        }
        
        if (_filteredSales == null) 
            return;
            
        _filteredSales = field switch
        {
            "date" => _sortAscending 
                ? _filteredSales.OrderBy(s => s.SaleDate).ToList() 
                : _filteredSales.OrderByDescending(s => s.SaleDate).ToList(),
                
            "correspondent" => _sortAscending 
                ? _filteredSales.OrderBy(s => s.CorrespondentName).ToList() 
                : _filteredSales.OrderByDescending(s => s.CorrespondentName).ToList(),
                
            "item" => _sortAscending 
                ? _filteredSales.OrderBy(s => s.ItemName).ToList() 
                : _filteredSales.OrderByDescending(s => s.ItemName).ToList(),
                
            "netAmount" => _sortAscending 
                ? _filteredSales.OrderBy(s => s.NetAmount).ToList() 
                : _filteredSales.OrderByDescending(s => s.NetAmount).ToList(),
                
            "taxAmount" => _sortAscending 
                ? _filteredSales.OrderBy(s => s.TaxAmount).ToList() 
                : _filteredSales.OrderByDescending(s => s.TaxAmount).ToList(),
                
            "totalAmount" => _sortAscending 
                ? _filteredSales.OrderBy(s => s.TotalAmount).ToList() 
                : _filteredSales.OrderByDescending(s => s.TotalAmount).ToList(),
                
            _ => _filteredSales
        };
    }
    
    private string GetSortIcon(string field)
    {
        if (_sortField != field)
            return "";
            
        return _sortAscending ? "↑" : "↓";
    }
    
    private void CalculateSummaryData()
    {
        if (_sales == null)
            return;
            
        // 전체 합계 계산
        _totalAmount = _sales.Sum(s => s.TotalAmount);
        _netAmount = _sales.Sum(s => s.NetAmount);
        _taxAmount = _sales.Sum(s => s.TaxAmount);
        
        // 고유 고객 수
        _uniqueCustomerCount = _sales.Select(s => s.CorrespondentId).Distinct().Count();
        
        // 전월 대비 매출 증감률 계산
        var thisMonth = DateTime.Today.Month;
        var lastMonth = DateTime.Today.AddMonths(-1).Month;
        
        var thisMonthSales = _sales
            .Where(s => s.SaleDate.Month == thisMonth && s.SaleDate.Year == DateTime.Today.Year)
            .Sum(s => s.TotalAmount);
            
        var lastMonthSales = _sales
            .Where(s => s.SaleDate.Month == lastMonth && s.SaleDate.Year == (thisMonth == 1 ? DateTime.Today.Year - 1 : DateTime.Today.Year))
            .Sum(s => s.TotalAmount);
            
        if (lastMonthSales > 0)
        {
            _salesTrend = (double)(thisMonthSales - lastMonthSales) / (double)lastMonthSales;
        }
        else
        {
            _salesTrend = thisMonthSales > 0 ? 1.0 : 0.0;
        }
        
        // 전월 대비 신규 고객 수 계산
        var thisMonthCustomers = _sales
            .Where(s => s.SaleDate.Month == thisMonth && s.SaleDate.Year == DateTime.Today.Year)
            .Select(s => s.CorrespondentId)
            .Distinct()
            .ToList();
            
        var lastMonthCustomers = _sales
            .Where(s => s.SaleDate.Month == lastMonth && s.SaleDate.Year == (thisMonth == 1 ? DateTime.Today.Year - 1 : DateTime.Today.Year))
            .Select(s => s.CorrespondentId)
            .Distinct()
            .ToList();
            
        _newCustomerCount = thisMonthCustomers.Count(c => !lastMonthCustomers.Contains(c));
        
        if (lastMonthCustomers.Count > 0)
        {
            _customerTrend = (double)(thisMonthCustomers.Count - lastMonthCustomers.Count) / lastMonthCustomers.Count;
        }
        else
        {
            _customerTrend = thisMonthCustomers.Count > 0 ? 1.0 : 0.0;
        }
    }
    
    private void GenerateChartData()
    {
        if (_sales == null)
            return;
            
        // 기간에 따른 데이터 필터링
        var filteredSales = _selectedPeriod switch
        {
            "month" => _sales.Where(s => s.SaleDate >= DateTime.Today.AddMonths(-1)).ToList(),
            "quarter" => _sales.Where(s => s.SaleDate >= DateTime.Today.AddMonths(-3)).ToList(),
            "year" => _sales.Where(s => s.SaleDate >= DateTime.Today.AddYears(-1)).ToList(),
            _ => _sales.ToList()
        };
        
        // 거래처별 매출 집계
        var customerGroups = filteredSales
            .GroupBy(s => s.CorrespondentId)
            .Select(g => new { 
                CorrespondentId = g.Key, 
                CustomerName = g.First().CorrespondentName, 
                TotalAmount = g.Sum(s => s.TotalAmount) 
            })
            .OrderByDescending(g => g.TotalAmount)
            .Take(8)
            .ToList();
            
        // 전체 금액 계산
        var totalAmount = customerGroups.Sum(g => g.TotalAmount);
        
        // 차트 데이터 생성
        _customerSalesData = customerGroups
            .Select(g => new CustomerSalesData 
            { 
                CorrespondentId = g.CorrespondentId, 
                CustomerName = g.CustomerName, 
                TotalAmount = g.TotalAmount,
                Percentage = totalAmount > 0 ? Math.Round((double)g.TotalAmount / (double)totalAmount * 100, 1) : 0
            })
            .ToList();
            
        // 품목별 매출 집계
        var itemGroups = filteredSales
            .GroupBy(s => s.ItemId)
            .Select(g => new { 
                ItemId = g.Key, 
                ItemName = g.First().ItemName, 
                TotalAmount = g.Sum(s => s.TotalAmount) 
            })
            .OrderByDescending(g => g.TotalAmount)
            .Take(8)
            .ToList();
            
        // 품목별 차트 데이터 생성
        _itemSalesData = itemGroups
            .Select(g => new ItemSalesData 
            { 
                ItemId = g.ItemId, 
                ItemName = g.ItemName, 
                TotalAmount = g.TotalAmount,
                Percentage = totalAmount > 0 ? Math.Round((double)g.TotalAmount / (double)totalAmount * 100, 1) : 0
            })
            .ToList();
    }
    
    private void ChangeChartPeriod(string period)
    {
        _selectedPeriod = period;
        GenerateChartData();
    }
    
    private void ShowSaleDetail(Sale sale)
    {
        _selectedSale = sale;
        _showSaleDetailDialog = true;
    }
    
    private void ShowInvoiceDialog()
    {
        _invoiceStartDate = DateTime.Today.AddDays(-30);
        _invoiceEndDate = DateTime.Today;
        _selectedCorrespondentId = 0;
        _showInvoiceDialog = true;
        UpdateInvoicePreview();
    }
    
    private void UpdateInvoicePreview()
    {
        _invoiceSales = _sales
            .Where(s => (_selectedCorrespondentId == 0 || s.CorrespondentId == _selectedCorrespondentId) &&
                       (s.SaleDate >= _invoiceStartDate && s.SaleDate <= _invoiceEndDate))
            .ToList();
    }
    
    private void GenerateInvoice()
    {
        // 실제로는 거래명세표 생성 로직이 들어갈 자리
        // 지금은 다이얼로그만 닫음
        _showInvoiceDialog = false;
    }
    
    private void PrintInvoice(Sale? sale)
    {
        // 실제로는 개별 거래명세표 출력 로직이 들어갈 자리
        // 지금은 다이얼로그만 닫음
        if (_showSaleDetailDialog)
            _showSaleDetailDialog = false;
    }
    
    private enum ViewMode
    {
        List,
        Card
    }
    
    // 매출 모델 클래스
    public class Sale
    {
        public int SaleId { get; set; }
        public string SaleNumber { get; set; } = "";
        public DateTime SaleDate { get; set; }
        public int CorrespondentId { get; set; }
        public string CorrespondentName { get; set; } = "";
        public int ItemId { get; set; }
        public string ItemName { get; set; } = "";
        public int Quantity { get; set; }
        public string Unit { get; set; } = "";
        public decimal NetAmount { get; set; } // 공급가액
        public decimal TaxAmount { get; set; } // 부가세
        public decimal TotalAmount { get; set; } // 합계
        public string BusinessNumber { get; set; } = ""; // 사업자등록번호
        public string Ceo { get; set; } = ""; // 대표자
        public string PhoneNumber { get; set; } = ""; // 연락처
        public string Address { get; set; } = ""; // 주소
        public string? Note { get; set; } // 비고
    }
    
    // 거래처별 매출 데이터 클래스
    public class CustomerSalesData
    {
        public int CorrespondentId { get; set; }
        public string CustomerName { get; set; } = "";
        public decimal TotalAmount { get; set; }
        public double Percentage { get; set; }
    }
    
    // 품목별 매출 데이터 클래스
    public class ItemSalesData
    {
        public int ItemId { get; set; }
        public string ItemName { get; set; } = "";
        public decimal TotalAmount { get; set; }
        public double Percentage { get; set; }
    }
}