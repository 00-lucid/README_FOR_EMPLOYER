@page "/albums/detail/{AlbumId:int}"
@using IV.Shared.Helpers
@using IV.Shared.Interfaces.Data
@using IV.Shared.Model
@using IV.Shared.Interfaces.Services
@using IV.Shared.Pages.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Configuration
@using SchemaLens.Client.Utils
@inject IAlbumService AlbumService
@inject IAlbumPhotoService AlbumPhotoService
@inject IAlbumStoryService AlbumStoryService
@inject IFeedService FeedService
@inject IUserService UserService
@inject IAzureService AzureService
@inject IAzureFaceAiService AzureFaceAiService
@inject IAlbumSubscriptionService AlbumSubscriptionService
@inject IAlbumShortService AlbumShortService
@inject IAlbumMediaService AlbumMediaService
@* @inject IUserContext UserContext *@
@* @inject string UserId *@
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@if (IsLoading)
{
    <HSpinner IsLoading="@IsLoading" ProgressText="@_progressText"/>
}

@if (_album == null)
{
    <HSpinner IsLoading="@IsLoading"/>
}
else
{
    <HLayoutScroll>
        <HColumn Padding="16px" Gap="8px">
            <HText TextType="HText.HTextType.Heading3">@_album.AlbumTitle</HText>
            <HText TextType="HText.HTextType.Body1">@_album.AlbumDescription</HText>
            <HText TextType="HText.HTextType.Caption">생성일: @_album.CreatedAt.ToString("yyyy-MM-dd HH:mm")</HText>
            <!-- 구독 상태에 따라 버튼 표시 -->
            
            @if (!_userId.Equals(_album.UserId))
            {
                @if (_isSubscribed)
                {
                    <HButton OnClick="UnsubscribeFromAlbum" Type="HButton.ButtonType.Danger">
                        앨범 구독 취소
                    </HButton>
                }
                else
                {
                    <HButton OnClick="SubscribeToAlbum" Type="HButton.ButtonType.Primary">
                        앨범 구독
                    </HButton>
                }
            }
            else
            {
                <HButton Type="HButton.ButtonType.Primary" OnClick="@(() => NavigationManager.NavigateTo("/album-option/" + AlbumId))">
                    수정
                </HButton>
            }
        </HColumn>
        
        <!-- 기존 앨범 사진, 스토리 관련 코드들 -->
        @* <HLayoutScrollRow> *@
        @*     <HRow Padding="16px 16px 16px 16px" Gap="16px"> *@
        @*         <HFileInputButton Id="UploadStory" OnFileChanged="@HandleStoryChanged" IsFloating="false" /> *@
        @*         @foreach (AlbumStoryModel story in _stories) *@
        @*         { *@
        @*             <HCircleCard ImageUrl="@story.MediaUrl" OnClick="@(() => OnStoryClick(story))" /> *@
        @*         } *@
        @*     </HRow> *@
        @* </HLayoutScrollRow> *@

        @if (_medias.Count == 0)
        {
            <HNotingText Title="＼(◎o◎)／" SubTitle="아직 미디어가 없어요" Compare="@_medias"/>
        }
        else
        {
            <HColumn IsBottomSpace="true">
                <HGrid Padding="16px 0px 16px 0px">
                    @for (int i = 0; i < _medias.Count; i++)
                    {
                        var media = _medias[i];
                        var currentIndex = i;

                        <div style="cursor: pointer;" @onclick="@(() => OpenMediaDialog(currentIndex))">
                            @if (media.MediaType == "photo")
                            {
                                <HCardImage ImageUrl="@media.Url" IsFooter="false" />
                            }
                            else if (media.MediaType == "short")
                            {
                                <HCardVideo VideoUrl="@media.Url" IsFooter="false" />
                            }
                        </div>
                    }
                </HGrid>
            </HColumn>
        }
    </HLayoutScroll>
}

<!-- 미디어를 크게 보기 위한 다이얼로그 처리 -->
@if (_isMediaDialogOpen)
{
    AlbumMedia selectedMedia = _medias[_currentMediaIndex];

    if (selectedMedia.MediaType == "photo")
    {
        <HDialogImage IsOpen="@_isMediaDialogOpen"
                      IsOpenChanged="@((v) => _isMediaDialogOpen = v)"
                      ImageUrls="@_medias.Select(m => m.Url).ToList()"
                      CurrentIndex="@_currentMediaIndex"
                      CurrentIndexChanged="HandleMediaIndexChanged"
                      OnDeleteImage="@HandleDeleteMedia" />
    }
    else if (selectedMedia.MediaType == "short")
    {
        <HDialogVideo IsOpen="@_isMediaDialogOpen"
                      IsOpenChanged="@((open) => _isMediaDialogOpen = open)"
                      VideoUrls="@_medias.Select(m => m.Url).ToList()"
                      CurrentIndex="@_currentMediaIndex"
                      CurrentIndexChanged="HandleMediaIndexChanged"
                      OnDeleteVideo="@HandleDeleteMedia" />
    }
}

<!-- 파일 업로드 버튼 등 기존 코드 -->
<HFileInputButton Id="UploadPhoto" OnFileChanged="@HandleFileChanged" IsFloating="true"/>

<HAlertContainer @ref="_alertContainer" />

<HDialog Title="피드에 올라갈 글을 남겨주세요."
         IsOpen="@_isReviewDialogOpen"
         IsOpenChanged="@(value => _isReviewDialogOpen = value)">
    <ChildContent>
        <HText TextType="HText.HTextType.Caption">피드를 꾸며주세요.</HText>
        <HTextArea @bind-Value="_body"/>
        <HRow AlignItems="center" Gap="8px">
            <HText TextType="HText.HTextType.Caption" TextColorType="HText.HTextColorType.Info">AI SAFETY</HText>
            <HTooltipButton Size="HTooltipButton.TooltipButtonSize.Small" Text="IV만의 효과적인 AI 시스템을 활용해 사진에 모든 얼굴을 알아볼 수 없게 함으로서 SNS 딥페이크 범죄를 예방합니다."/>
            <HToggleSwitch Size="HToggleSwitch.HToggleButtonSize.Small" IsToggled="_isToggleAiSafety" IsToggledChanged="ToggleAiSafety"/>
        </HRow>
    </ChildContent>
    <FooterContent>
        <HButton OnClick="@CancelReview">취소</HButton>
        <HButton OnClick="@ConfirmReview">확인</HButton>
    </FooterContent>
</HDialog>

@code {
    private int _userId;
    
    private bool _isSubscribed = false; // 현재 구독 상태
    private HAlertContainer? _alertContainer;

    private bool IsLoading { get; set; } = false; // 로딩 상태 변수 추가

    // 사진 목록과 스토리 목록을 보관할 리스트
    private List<AlbumPhotoModel> _photos = new();
    private List<AlbumStoryModel> _stories = new();
    private List<AlbumShortModel> _shorts = new();
    private List<AlbumMedia> _medias = new();

    // 다이얼로그 상태 관리
    private bool _isDialogOpen = false;           // 다이얼로그 열림/닫힘
    private bool _isStoryDialogOpen = false;
    private int _currentImageIndex = 0;           // 현재 선택된 이미지 인덱스
    private int _currentStoryIndex = 0;           // 현재 선택된 스토리 인덱스
    private List<string> _imageUrls = new();      // 사진 URL 모음
    private List<string> _storyUrls = new();      // 스토리 URL 모음
    private List<string> _mediaUrls = new();

    // 선택한 미디어를 다이얼로그로 보기 위한 변수
    private bool _isMediaDialogOpen = false;
    private int _currentMediaIndex = 0;
    
    private string _progressText = string.Empty;
    
    [Parameter]
    public int AlbumId { get; set; }
    
    private AlbumModel? _album;
    
    
    // 한줄평 입력 다이얼로그 표시 여부
    private bool _isReviewDialogOpen = false;

    // 업로드 시 한줄평을 저장할 변수
    private string _body = string.Empty;

    // 업로드할 파일 정보(사용자가 선택한 파일 목록)를 임시 보관하기 위한 변수
    private InputFileChangeEventArgs? _pendingFileChangeArgs;
    
    // AI Safety 토글
    private bool _isToggleAiSafety;
    
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB
    private const int MaxPhotoCount = 9;
    
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        _userId = await UserService.GetUserIdAsync();
        
        // 넘어온 AlbumId를 이용해 앨범 상세 조회
        _album = (await AlbumService.GetAlbumDetailByIdAsync(AlbumId)).FirstOrDefault();
        _photos = await AlbumPhotoService.GetAlbumPhotoByIdAsync(AlbumId);
        _stories = await AlbumStoryService.GetAlbumStoryByIdAsync(AlbumId);
        _shorts = await AlbumShortService.GetAlbumShortsByIdAsync(AlbumId);

        await LoadMedias();

        _imageUrls = _photos.Select(p => p.PhotoUrl ?? "").ToList();
        _storyUrls = _stories.Select(p => p.MediaUrl ?? "").ToList();
        
        IsLoading = false;
        
        // 구독 여부 확인
        if (_album != null)
        {
            _isSubscribed = await AlbumSubscriptionService.IsSubscribedToAlbumAsync(_userId, _album.AlbumId);
        }
    }
    
    private void OnPhotoClick(int index)
    {
        // 사진을 클릭하면 다이얼로그 오픈 + 현재 인덱스 설정
        _currentImageIndex = index;
        _isDialogOpen = true;
    }
    
    private void OnStoryClick(AlbumStoryModel story)
    {
        // 클릭된 스토리에 대한 로직을 작성
        _currentStoryIndex = _stories.IndexOf(story); // 클릭된 스토리의 인덱스 저장
        _isStoryDialogOpen = true; // 다이얼로그 열기 (예시: 선택된 스토리 보기)
    }

    private async Task HandleFileChanged(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0)
        {
            return;
        }

        // 새로 선택한 파일들
        var newFiles = e.GetMultipleFiles();

        // 1) 총 개수 검사: (이미 등록된 사진 + 새로 올리려는 파일) <= 4
        if (newFiles.Count > MaxPhotoCount)
        {
            // 사용자에게 4개까지 가능하다는 경고 표시
            // 예: Toast, 메시지 등
            Console.WriteLine($"최대 {MaxPhotoCount}장까지만 업로드 가능합니다.");
            return;
        }

        // // 2) 개별 파일 용량 검사
        // foreach (var file in newFiles)
        // {
        //     if (file.Size > MaxFileSize)
        //     {
        //         Console.WriteLine($"파일 {file.Name} 이(가) 5MB를 초과합니다.");
        //         return;
        //     }
        // }
        
        _pendingFileChangeArgs = e;
        _isReviewDialogOpen = true;
    }
    
    private async Task HandleStoryChanged(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0)
        {
            return;
        }

        IsLoading = true;
        _progressText = "파일 업로드를 준비 중입니다...";

        try
        {
            // 네트워크 속도 측정
            int concurrencyLevel = await Common.GetNetworkConcurrencyLevelAsync();

            int totalFiles = e.FileCount;

            using SemaphoreSlim semaphore = new SemaphoreSlim(concurrencyLevel);
            int completedCount = 0;
            var uploadTasks = new List<Task>();

            foreach (var file in e.GetMultipleFiles())
            {
                // 각 파일을 병렬로 업로드
                uploadTasks.Add(UploadSingleFileAsync(file, totalFiles, semaphore, completedCount));
            }

            await Task.WhenAll(uploadTasks);

            // 새로운 사진 목록 동기화
            _stories = await AlbumStoryService.GetAlbumStoryByIdAsync(AlbumId);
            
            // UI 표시용 이미지 경로 목록 갱신
            _storyUrls = _stories.Select(s => s.MediaUrl ?? string.Empty).ToList();
            
            await InvokeAsync(StateHasChanged);

            _alertContainer.ShowAlert(new HAlertModel
            {
                Title = "등록",
                Subtitle = "등록이 성공적으로 처리되었습니다.",
                Type = HAlert.AlertType.Success
            });
        }
        catch (Exception ex)
        {
            _alertContainer.ShowAlert(new HAlertModel
            {
                Title = "오류",
                Subtitle = "스토리 업로드 중 오류가 발생했습니다.",
                Type = HAlert.AlertType.Error
            });
            Console.WriteLine(ex.Message);
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async void HandleDeleteImage()
    {
        if (_photos.Count == 0)
            return;
        
        // 사진 삭제 API 호출
        bool isDeleted = await AlbumPhotoService.DeletePhotoAsyncByPhotoId(AlbumId, _photos[_currentImageIndex].AlbumPhotoId);

        if (isDeleted)
        {
            _alertContainer.ShowAlert(new HAlertModel 
            {
                Title = "삭제", 
                Subtitle = "삭제가 성공적으로 처리되었습니다.", 
                Type = HAlert.AlertType.Success 
            });

            // 로컬 목록에서 이미지 제거
            _photos.RemoveAt(_currentImageIndex);

            if (_photos.Count == 0)
            {
                // 남은 사진이 없을 때의 처리
                _isDialogOpen = false;
                _currentImageIndex = 0;
            }
            else
            {
                // 남은 사진이 있으면 인덱스를 조정 (필요에 따라 조절)
                if (_currentImageIndex >= _photos.Count)
                {
                    _currentImageIndex = _photos.Count - 1;
                }
            }

            // 사진 URL 목록 재생성
            _imageUrls = _photos.Select(p => p.PhotoUrl ?? "").ToList();

            StateHasChanged();
        }
    }

    private async void HandleDeleteMedia()
    {
        if (_medias.Count == 0)
            return;

        var selectedMedia = _medias[_currentMediaIndex];
        bool isDeleted = false;

        if (selectedMedia.MediaType == "photo")
        {
            isDeleted = await AlbumPhotoService.DeletePhotoAsyncByPhotoId(AlbumId, selectedMedia.MediaId);
        }
        else if (selectedMedia.MediaType == "short")
        {
            isDeleted = await AlbumShortService.DeleteShortAsyncByShortId(AlbumId, selectedMedia.MediaId);
        }

        if (isDeleted)
        {
            _alertContainer.ShowAlert(new HAlertModel
            {
                Title = "삭제",
                Subtitle = "삭제가 성공적으로 처리되었습니다.",
                Type = HAlert.AlertType.Success
            });

            _medias.RemoveAt(_currentMediaIndex);

            if (_medias.Count == 0)
            {
                _isMediaDialogOpen = false;
                _currentMediaIndex = 0;
            }
            else if (_currentMediaIndex >= _medias.Count)
            {
                _currentMediaIndex = _medias.Count - 1;
            }

            StateHasChanged();
        }
        else
        {
            _alertContainer.ShowAlert(new HAlertModel
            {
                Title = "실패",
                Subtitle = "미디어를 삭제하는 중 문제가 발생했습니다.",
                Type = HAlert.AlertType.Error
            });
        }
    }
    
    private async void HandleDeleteStory()
    {
        if (_stories.Count == 0)
            return;
        
        // 사진 삭제 API 호출
        bool isDeleted = await AlbumStoryService.DeleteStoryAsyncByStoryId(AlbumId, _stories[_currentStoryIndex].AlbumStoryId);

        if (isDeleted)
        {
            _alertContainer.ShowAlert(new HAlertModel 
            {
                Title = "삭제", 
                Subtitle = "삭제가 성공적으로 처리되었습니다.", 
                Type = HAlert.AlertType.Success 
            });

            // 로컬 목록에서 스토리 제거
            _stories.RemoveAt(_currentStoryIndex);

            if (_stories.Count == 0)
            {
                // 남은 스토리 없을 때의 처리
                _isStoryDialogOpen = false;
                _currentStoryIndex = 0;
            }
            else
            {
                // 남은 스토리가 있으면 인덱스를 조정 (필요에 따라 조절)
                if (_currentStoryIndex >= _stories.Count)
                {
                    _currentStoryIndex = _stories.Count - 1;
                }
            }

            // 스토리 URL 목록 재생성
            _storyUrls = _stories.Select(p => p.MediaUrl ?? "").ToList();

            StateHasChanged();
        }
    }

    private async Task SubscribeToAlbum()
    {
        if (_album == null)
        {
            return;
        }

        try
        {
            IsLoading = true; // 로딩 시작
            bool success = await AlbumSubscriptionService.SubscribeToAlbumAsync(_userId, _album.AlbumId);

            // 결과에 따라 사용자에게 피드백 제공
            if (success)
            {
                _alertContainer?.ShowAlert(new HAlertModel
                {
                    Title = "구독 성공",
                    Subtitle = "앨범을 구독했습니다."
                });

                _isSubscribed = true;
            }
            else
            {
                _alertContainer?.ShowAlert(new HAlertModel
                {
                    Title = "구독 실패",
                    Subtitle = "앨범 구독에 실패했습니다.",
                    Type = HAlert.AlertType.Error
                });
            }
        }
        catch (Exception ex)
        {
            _alertContainer?.ShowAlert( new HAlertModel {
                Title = "오류",
                Subtitle = $"구독 중 오류가 발생했습니다: {ex.Message}",
                Type = HAlert.AlertType.Error
            });
        }
        finally
        {
            IsLoading = false; // 로딩 종료
        }
    }

    private async Task UnsubscribeFromAlbum()
    {
        if (_album == null)
            return;

        try
        {
            IsLoading = true;
            bool success = await AlbumSubscriptionService.UnsubscribeFromAlbumAsync(_userId, AlbumId);

            if (success)
            {
                _alertContainer?.ShowAlert(new HAlertModel
                {
                    Title = "구독 취소 성공",
                    Subtitle = "앨범 구독을 취소했습니다."
                });

                _isSubscribed = false;
            }
            else
            {
                _alertContainer?.ShowAlert(new HAlertModel
                {
                    Title = "구독 취소 실패",
                    Subtitle = "앨범 구독 취소에 실패했습니다.",
                    Type = HAlert.AlertType.Error
                });
            }
        }
        catch (Exception ex)
        {
            _alertContainer?.ShowAlert( new HAlertModel {
                Title = "오류",
                Subtitle = $"구독 취소 중 오류가 발생했습니다: {ex.Message}",
                Type = HAlert.AlertType.Error
            });
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    // 병렬
    // private async Task UploadSingleFileAsync(
    //     IBrowserFile file,
    //     int totalFiles,
    //     SemaphoreSlim semaphore,
    //     int completedCount,
    //     string type
    // )
    // {
    //     await semaphore.WaitAsync();
    //     try
    //     {
    //         // 파일 업로드(Chunk 단위 등 필요 시 구현)
    //         string fileUri = await UploadChunkFile(file);
    //
    //         if (type.Equals("story"))
    //         {
    //             await AlbumStoryService.AddFileInfo(AlbumId, fileUri);
    //         }
    //         else
    //         {
    //             await AlbumPhotoService.AddFileInfo(AlbumId, fileUri);
    //         }
    //         
    //         int doneNow = Interlocked.Increment(ref completedCount);
    //         _progressText = $"파일 업로드 중 {doneNow}/{totalFiles}";
    //
    //         // UI 스레드 갱신
    //         await InvokeAsync(StateHasChanged);
    //     }
    //     finally
    //     {
    //         semaphore.Release();
    //     }
    // }
    
    // 직렬
    private async Task<string> UploadSingleFileAsync(
        IBrowserFile file,
        int totalFiles,
        SemaphoreSlim semaphore,
        int completedCount
    )
    {
        try
        {
            // 1) 파일 업로드(Chunk 단위 등 필요 시 구현)
            string fileUri = await UploadChunkFile(file);
        
            // 2) fileUri를 보고 테이블 분기 처리
            if (fileUri.Contains("/shorts/", StringComparison.OrdinalIgnoreCase))
            {
                // 쇼츠 테이블 등록
                Console.WriteLine("Short 파일로 인식");
                await AlbumShortService.AddFileInfo(AlbumId, fileUri);
            }
            else if (fileUri.Contains("/images/", StringComparison.OrdinalIgnoreCase))
            {
                // 이미지 테이블 등록
                Console.WriteLine("이미지 파일로 인식");
                await AlbumPhotoService.AddFileInfo(AlbumId, fileUri);
            }
            else if (fileUri.Contains("/video/", StringComparison.OrdinalIgnoreCase))
            {
                // 비디오 테이블이 따로 있다면 이곳에서 처리
                Console.WriteLine("일반 영상 파일로 인식");
                // await AlbumVideoService.AddFileInfo(AlbumId, fileUri);
            }
            else
            {
                // 예: 스토리 테이블(또는 기타)
                Console.WriteLine("스토리/기타 파일로 인식");
                await AlbumStoryService.AddFileInfo(AlbumId, fileUri);
            }
            
            // 4) UI 스레드 갱신
            await InvokeAsync(StateHasChanged);
            
            return fileUri;
        }
        catch (Exception ex)
        {
            // 오류 처리 (예: 로깅, 알림 등)
            Console.WriteLine(ex.Message);
            return null;
        }
    }
    
    private async Task<string> UploadChunkFile(IBrowserFile file)
    {
        // 파일 형식 판별
        //    - 비디오 MIME 타입(예: video/mp4)인지 확인
        bool isVideo = file.ContentType.StartsWith("video", StringComparison.OrdinalIgnoreCase);
        
        // 파일에서 최대 100MB까지 스트림 열기
        using var fileStream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024);

        const int chunkSize = 1 * 1024 * 1024; // 1MB
        var globalBuffer = new byte[chunkSize];
        int offset = 0;

        int chunkIndex = 0;
        string fileId = Guid.NewGuid().ToString();

        while (true)
        {
            var bytesRead = await fileStream.ReadAsync(globalBuffer, offset, chunkSize - offset);

            // 더 이상 읽을 데이터가 없으면 남은 부분 업로드 후 중단
            if (bytesRead == 0)
            {
                if (offset > 0) 
                {
                    // 남은 데이터 업로드
                    var lastData = new byte[offset];
                    Array.Copy(globalBuffer, 0, lastData, 0, offset);
                    
                    await AzureService.UploadChunkAsync(
                        lastData, 
                        chunkIndex, 
                        fileId, 
                        isVideo ? "shorts" : "images"
                    );
                }
                break;
            }

            offset += bytesRead;

            if (offset == chunkSize)
            {
                await AzureService.UploadChunkAsync(
                    globalBuffer, 
                    chunkIndex, 
                    fileId, 
                    isVideo ? "shorts" : "images"
                );
                
                chunkIndex++;
                offset = 0;
                // 다음 청크 업로드를 위해 globalBuffer 초기화 (원한다면 Array.Clear를 쓸 수도 있습니다)
                globalBuffer = new byte[chunkSize];
            }
        }

        // 업로드된 청크 병합
        string fileUri = await AzureService.MergeChunksAsync(
            fileId, 
            file.Name, 
            isVideo ? "shorts" : "images"
        );
        return fileUri;
    }
    
    /// <summary>
    /// 다이얼로그에서 “확인” 버튼을 눌렀을 때 실제 업로드 로직을 수행합니다.
    /// </summary>
    private async Task ConfirmReview()
    {
        if (_pendingFileChangeArgs is null)
        {
            // 안전장치
            return;
        }

        // 한줄평 확인 후, 다이얼로그 닫기
        _isReviewDialogOpen = false;
        
        try
        {
            IsLoading = true;
            _progressText = "파일 업로드를 준비 중입니다...";

            // 네트워크 속도 측정
            int concurrencyLevel = await Common.GetNetworkConcurrencyLevelAsync();

            var existingPhotoIds = _photos.Select(p => p.AlbumPhotoId).ToHashSet();
            var existingShortIds = _shorts.Select(s => s.ShortId).ToHashSet();
            int totalFiles = _pendingFileChangeArgs.FileCount;

            using SemaphoreSlim semaphore = new SemaphoreSlim(concurrencyLevel);
            int completedCount = 0;
            var uploadTasks = new List<Task>();

            // 병렬 파일 업로드
            // foreach (var file in _pendingFileChangeArgs.GetMultipleFiles())
            // {
            //     // 각 파일을 병렬로 업로드
            //     uploadTasks.Add(UploadSingleFileAsync(file, totalFiles, semaphore, completedCount, "photo"));
            // }
            // await Task.WhenAll(uploadTasks);
            
            // 직렬 파일 업로드
            foreach (var file in _pendingFileChangeArgs.GetMultipleFiles())
            {
                string uploadedUrl = await UploadSingleFileAsync(file, totalFiles, null, completedCount);
                // 만약 매 파일마다 프로그레스 문구를 갱신하고 싶다면:
                completedCount++;
                _progressText = $"업로드 중 {completedCount}/{totalFiles}";
                
                if (file.ContentType.StartsWith("video"))
                {
                    // AzureService에서 썸네일 생성
                    string thumbnailUrl = await AzureService.GenerateAndUploadThumbnailAsync(uploadedUrl);

                    if (!string.IsNullOrEmpty(thumbnailUrl))
                    {
                        // 썸네일 URL DB에 업데이트 (적절한 앨범 사진/쇼츠 서비스 호출 가정)
                        // 신규 영상과 썸네일 정보를 DB에 등록하는 메서드를 적절히 호출하면 됩니다.
                        // 예시: AlbumShortService 또는 AlbumPhotoService 사용
                        // 실제 서비스 구조에 따라 달라질 수 있습니다.

                        await AlbumShortService.RegisterThumbnailAsync(uploadedUrl, thumbnailUrl, AlbumId);
                    }
                }
                
                await InvokeAsync(StateHasChanged);
            }

            // 업로드 후 새 사진 목록 가져오기
            _photos = await AlbumPhotoService.GetAlbumPhotoByIdAsync(AlbumId);
            _imageUrls = _photos.Select(p => p.PhotoUrl ?? string.Empty).ToList();
            
            // 기존에 없던 사진만 필터링
            var newPhotos = _photos
                .Where(p => !existingPhotoIds.Contains(p.AlbumPhotoId))
                .ToList();
            newPhotos.Reverse();

            _shorts = await AlbumShortService.GetAlbumShortsByIdAsync(AlbumId);
            
            var newShorts = _shorts
                .Where(s => !existingShortIds.Contains(s.ShortId))
                .ToList();
            newShorts.Reverse();
            
            // 4) AI SAFETY 옵션이 켜져있다면(=true), 얼굴 영역을 블러 처리
            // if (_isToggleAiSafety)
            if (false)
            {
                foreach (var photo in newPhotos)
                {
                    // 실제 블러 처리: AzureFaceAiService 호출
                    var blurredUrl = await AzureFaceAiService.BlurFacesIfNeededAsync(photo.PhotoUrl);
                
                    // 블러된 결과를 DB(혹은 서버)에 다시 저장(예: 사진 경로 업데이트)
                    // 아래는 가상의 예시 함수라 실제 프로젝트 상황에 맞춰 구현 필요
                    // await AlbumPhotoService.UpdateAlbumPhotoUrlAsync(
                    //     photo.AlbumPhotoId,
                    //     blurredUrl
                    // );

                    if (blurredUrl.Equals(String.Empty))
                    {
                        return;
                    }
                    
                    // 이후에 메모리를 갱신해 UI에도 반영
                    photo.PhotoUrl = blurredUrl;
                }

                // 변경된 후 리스트 다시 불러오기
                _photos = await AlbumPhotoService.GetAlbumPhotoByIdAsync(AlbumId);
                _imageUrls = _photos.Select(p => p.PhotoUrl ?? string.Empty).ToList();
                await InvokeAsync(StateHasChanged);
            }

            // 피드 생성 (여기까지 왔다면 최소 하나의 사진 또는 영상이 등록되었어야 함)
            int newFeedId = await FeedService.CreateFeedAsync(AlbumId, _userId, _body);
            
            int sortOrder = 0;

            // newPhotos 처리
            if (newPhotos.Any())
            {
                for (int j = 0; j < newPhotos.Count; j++)
                {
                    _progressText = $"피드 업로드 중 {j + 1}/{newPhotos.Count}";
                    await FeedService.CreateFeedAlbumPhotoAsync(newFeedId, newPhotos[j].AlbumPhotoId, sortOrder);

                    sortOrder++;
                    await InvokeAsync(StateHasChanged);
                }
            }

            // newShorts 처리
            if (newShorts.Any())
            {
                for (int j = 0; j < newShorts.Count; j++)
                {
                    _progressText = $"쇼츠 업로드 중 {j + 1}/{newShorts.Count}";
                    await FeedService.CreateFeedAlbumShortAsync(newFeedId, newShorts[j].ShortId, sortOrder);

                    sortOrder++;
                    await InvokeAsync(StateHasChanged);
                }
            }
            
            _alertContainer.ShowAlert(new HAlertModel
            {
                Title = "등록",
                Subtitle = "등록이 성공적으로 처리되었습니다.",
                Type = HAlert.AlertType.Success
            });
        }
        catch (Exception ex)
        {
            _alertContainer.ShowAlert(new HAlertModel
            {
                Title = "오류",
                Subtitle = "파일 업로드 중 오류가 발생했습니다.",
                Type = HAlert.AlertType.Error
            });
            Console.WriteLine(ex.Message);
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);

            // 모든 처리가 끝나면 파일/텍스트 데이터 정리
            _pendingFileChangeArgs = null;
            _body = string.Empty;
        }
    }

    /// <summary>
    /// 다이얼로그에서 “취소” 버튼을 누르면 업로드를 하지 않고 닫기만 합니다.
    /// </summary>
    private void CancelReview()
    {
        _isReviewDialogOpen = false;
        _pendingFileChangeArgs = null;
        _body = string.Empty;
    }
    
    private void ToggleAiSafety(bool newValue)
    {
        _isToggleAiSafety = newValue;
        // 여기에 AI SAFETY 기능 활성화/비활성화 로직을 추가할 수 있습니다.
    }
    
    private async Task LoadMedias()
    {
        IsLoading = true;

        try
        {
            var photos = await AlbumPhotoService.GetAlbumPhotoByIdAsync(AlbumId);
            var shorts = await AlbumShortService.GetAlbumShortsByIdAsync(AlbumId);

            _medias.Clear();

            // 사진 추가
            foreach (var photo in photos)
            {
                _medias.Add(new AlbumMedia()
                {
                    MediaId = photo.AlbumPhotoId,
                    Url = photo.PhotoUrl,
                    MediaType = "photo",
                    CreatedAt = photo.CreatedAt
                });
            }

            // 쇼츠 추가
            foreach (var shortItem in shorts)
            {
                _medias.Add(new AlbumMedia()
                {
                    MediaId = shortItem.ShortId,
                    Url = shortItem.VideoUrl,
                    MediaType = "short",
                    CreatedAt = shortItem.CreatedAt
                });
            }
            
            _medias = _medias.OrderByDescending(m => m.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadAlbumData 실패: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    // 선택한 미디어 보기
    private void OpenMediaDialog(int index)
    {
        _currentMediaIndex = index;
        _isMediaDialogOpen = true;
    }
    
    private void HandleMediaIndexChanged(int newIndex)
    {
        if (_currentMediaIndex != newIndex)
        {
            _currentMediaIndex = newIndex;
            StateHasChanged(); // ⭐렌더링 업데이트 핵심⭐
        }
    }
}