@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using IV.Shared.Helpers
@using IV.Shared.Interfaces
@using IV.Shared.Interfaces.Services
@using IV.Shared.Pages.Components
@inject NavigationManager NavigationManager
@inject IEmailService EmailService
@inject IUserService UserService

<HSpinner IsLoading="@IsLoading" />

<HLayoutCenter>
    <div class="reset-container">
        <HRow AlignItems="center" JustifyContent="center">
            <h1>IV</h1>
        </HRow>
        <HColumn Gap="1rem">
            <form @onsubmit="HandleResetPassword">
                <HColumn Gap="1rem">
                    <HTextInput Label="New Password" Type="password" Id="newPassword"
                                Value="@_resetModel.NewPassword"
                                ValueChanged="val => _resetModel.NewPassword = val"
                                PlaceHolder="Enter your new password" />
                    
                    <HTextInput Label="Confirm Password" Type="password" Id="confirmPassword"
                                Value="@_resetModel.ConfirmPassword"
                                ValueChanged="val => _resetModel.ConfirmPassword = val"
                                PlaceHolder="Confirm your new password" />
                    
                    <button type="submit" class="btn btn-primary">Reset Password</button>
                </HColumn>
            </form>

            @* 에러 메시지 *@
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="error-message">@ErrorMessage</p>
            }
        </HColumn>
    </div>
</HLayoutCenter>

@code {
    [SupplyParameterFromQuery]
    private string? email { get; set; } 
    
    [SupplyParameterFromQuery(Name = "returnUrl")]
    private string? ReturnUrl { get; set; }
    
    private readonly ResetModel _resetModel = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;

    private async Task HandleResetPassword()
    {
        IsLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            // 비밀번호 검증
            if (string.IsNullOrEmpty(_resetModel.NewPassword) || _resetModel.NewPassword.Length < 6)
            {
                ErrorMessage = "Password must be at least 6 characters long.";
                return;
            }

            if (_resetModel.NewPassword != _resetModel.ConfirmPassword)
            {
                ErrorMessage = "Passwords do not match.";
                return;
            }

            try
            {
                // 토큰 복호화
                if (!string.IsNullOrEmpty(email))
                {
                    var decryptedEmail = AesEncryptionHelper.Decrypt(Uri.UnescapeDataString(email));
                    // 실제 비밀번호 설정 로직 추가 필요
                    bool isReset = await UserService.ResetPasswordAsync(decryptedEmail, _resetModel.NewPassword);

                    if (isReset)
                    {
                        // 성공 시 로그인 페이지로 이동
                        NavigationManager.NavigateTo(!string.IsNullOrEmpty(ReturnUrl) ? $"/login?returnUrl={ReturnUrl}" : $"/login");
                    }
                }
                else
                {
                    throw new Exception("Invalid token.");
                }
            }
            catch (Exception ex)
            {
                // 복호화 실패 시 에러 처리 (로그인 페이지로 이동)
                Console.WriteLine($"Token decryption failed: {ex.Message}");
                NavigationManager.NavigateTo("/recover-account");
            }
        }
        catch (Exception)
        {
            ErrorMessage = "An error occurred while resetting your password. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class ResetModel
    {
        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}